{"0": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/announcements/",
    "relUrl": "/announcements/"
  },"1": {
    "doc": "Announcements",
    "title": "Teams Posted, Project Pitch Released",
    "content": "Feb 11 &middot; 0 min read Team assignments are now available on piazza, and the first team deliverable, the project pitch is now available as well. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/announcements/",
    "relUrl": "/announcements/"
  },"2": {
    "doc": "Announcements",
    "title": "HW2 Posted, Team Formation now available",
    "content": "Jan 28 &middot; 0 min read HW2 is now released, and will be due on Friday, Feb 11. We strongly encourage you to read through the assignment soon, so that you can begin to formulate a plan of attack to complete this assignment. We have also posted an overview and schedule of deliverables of the team project. The first deliverable will be the Team Formation Form, which you should submit by February 9th. Please think about who you would like to work with, and be sure to fill out the form. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/announcements/",
    "relUrl": "/announcements/"
  },"3": {
    "doc": "Announcements",
    "title": "Welcome to CS4530, Spring 2022",
    "content": "Nov 16 &middot; 1 min read On behalf of the entire instructional team (all 4 instructors and 18 TAs), welcome to the Spring 2022 edition of CS 4530! This website will contain all of the lectures, assignments and tutorials for the class. Our Canvas site contains your gradebook, as well as single-sign-on links to Piazza (for discussion), GradeScope (for submitting assignments), details of office hours, and replicates much of the material on the class website. In advance of the first week of class, we’ve shared the first class module and the first homework assignment. You should feel free to take a look now if you are eager, but if you are still enjoying the last moments of your winter break, then you’ll be no worse off to wait to look at this material until the class begins. We are excited to meet you all next week! . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/announcements/",
    "relUrl": "/announcements/"
  },"4": {
    "doc": "Announcements",
    "title": "Initial Website Launched &amp; Registration Information",
    "content": "Nov 16 &middot; 1 min read Welcome to the course website for CS4530, Spring 2022! Over the coming weeks, we will be populating this website (and Canvas) with more information about the course. We understand that all five sections filled up very quickly, and that there are many students who would like to register for the class, but were not able to. If you must take this course this semester to graduate, please reach out to your academic advisor ASAP. The CS advisors have plans to help ensure that students who must take this class in order to graduate this semester will still be able to graduate in time. We (the instructors) do not have any ability to over-enroll our sections. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/announcements/",
    "relUrl": "/announcements/"
  },"5": {
    "doc": "Assignments",
    "title": "Assignments",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/",
    "relUrl": "/assignments/"
  },"6": {
    "doc": "Assignment 1: Venusians",
    "title": "Objectives of this Assignment",
    "content": "The objectives for this first assignment are to: . | get you familiar with the basics of Typescript and the VSC/npm ecosystem. | have you re-acquaint yourself with the basics of object-oriented programming, such as classes and objects. | learn to write new code in TypeScript. | . Your assignment will be graded following the rubric embedded in this document. Based on past experiences, we project that this assignment could take you up to 14 hours (depending on your prior preparation). We encourage you to start early so that you can post questions on Piazza, make the most use of our TAs’ tutorials, and attend office hours as necessary in order to ensure that you can reach Satisfactory marks across the board. This is an individual assignment. Please post any questions about this assignment on Piazza. We have many sections of this class, and we want to make sure that we respond to your questions the same way, regardless of which section you are in. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw1#objectives-of-this-assignment",
    "relUrl": "/assignments/hw1#objectives-of-this-assignment"
  },"7": {
    "doc": "Assignment 1: Venusians",
    "title": "Problem Statement",
    "content": "Mars is being invaded by Venusians. Here’s a description of the Venusian fleet: . | Each ship has a serial number, a crew, which is a list of Venusians, and a possibly-empty set of daughter ships, each of which is a ship. | Each Venusian has a name, which is a string, and a VSN (Venusian Security Number), which is a number. | When we say “fleet”, we mean a list of ships and their daughters, their daughters’ daughters, etc. | When we say the “fleet of a ship”, we mean the fleet consisting of its daughters. | . EXAMPLE: if ship 1 has daughters ship 11 and ship 12, and ship 11 has daughters 111 and 112, and ship 112 has daughters 1121 and 1122, and none of these ships has any other daughters, then the fleet of ship 1 consists of 1, 11, 12, 111, 112, 1121, and 1122 . Your task is to define TypeScript class Venusian and Ship as follows: . | The class Venusian has a contructor new Venusian(name:string) that returns a Venusian with the given name and a unique VSN. By “unique”, we mean that while your program is running, it must never re-use a VSN. It is OK for your program to re-use the same VSNs if you stop the program and run it again (it need not be a “globally unique” identifier). Venusian names are case-senstive. The class Venusian has the following public methods: . | getName():string returns the name of the Venusian. | getVsn():number returns the VSN of the given Venusian | . | The class Ship has a constructor new Ship(crew:Venusian[], daughters:Ship[]) that returns a ship with the given crew, the given daughters, and a unique serial number (similar to VSNs, the serial number need not be globally unique). The class Ship has the following public methods: . | getCrew():Venusian[] returns the crew of the ship. | getDaughters():Ship[] returns the daughters of the ship. | getSerialNumber():number returns the serial number of the ship | hasWaldo():boolean returns true iff the ship has one or more crew members named Waldo. | totalWaldos():number returns the number of Venusians named “Waldo” that are in the ship or its fleet. Venusians can be in two places at once, so if two Waldos have same VSN, you should count them twice. | removeWaldos():void removes any Venusians named “Waldo” from the crew of the ship. | removeDeepWaldos():void removes any Venusians named Waldo from the crews of the given ship and its fleet. | fleetHasDuplicates():boolean It has come to the attention of the Venusian fleet command that some shipbuilders have been cheating by putting multiple ships with the same serial number in the fleets of their ships. Given a ship, determines whether there are any duplicates among the ship and its fleet. The duplicates may occur anywhere in the ship and its fleet.` | . | . EXAMPLE: in the example above, there are no duplicates. If ship 12 were added to the daughters of ship 111, that would be a duplicate, and applying this function to ship 1 would return true. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw1#problem-statement",
    "relUrl": "/assignments/hw1#problem-statement"
  },"8": {
    "doc": "Assignment 1: Venusians",
    "title": "Starter Code and Details",
    "content": "We will supply you with starter code in hw1.zip. Getting Started . | Download and unpack hw1.zip in a fresh directory. You should have a directory hw1-handout containing package.json, src/ and a bunch of other files. | Open hw1-handout in VSCode. | Open up the VSCode terminal with ctrl + ~. Alternatively, you can also open a seperate terminal/cmd. Please make sure the shell is in the same folder as your package.json. | Fetch all the necessary dependancies by running npm install. You may not install additional third-party libraries to use in your code beyond what is included in the handout - we will grade your code using the package.json distributed in the handout. | The package also includes some basic sanity tests, which you can run by saying npm test. | . To help you set up a local development environment for this class, we’ve prepared a tutorial for setting up a development environment with NodeJS, VSCode and TypeScript. Additionally, An Absolute Beginner’s Guide to Using npm can help you in getting acquainted with npm. As a reference for getting started with TypeScript, we suggest the book “Programming TypeScript” by Boris Cherny. You can read this and many other tech books for free via Northeastern’s Libraries - follow the instructions on the course textbooks page. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw1#starter-code-and-details",
    "relUrl": "/assignments/hw1#starter-code-and-details"
  },"9": {
    "doc": "Assignment 1: Venusians",
    "title": "Rubric",
    "content": "Your code will be evaluated by automated testing in Gradescope. It will be judged for style using a linter with parameters set in the starter code that we will supply you. Your code must have no linter errors or warnings in order for it to receive any grade. Please note that you can check for linter issues before submitting by running npm run lint; many formatting issues can also be automatically fixed by running npm run format. If your code has no linter errors or warnings, then for each of the 10 methods listed above, you will receive a numeric score of: . | 2 (Satisfactory) | 1 (Meets minimum expecations) | 0 (Not passing) | . We have provided between one and three tests on Gradescope to check each of the ten functions that you have been asked to implement. For each function, the requirements for each of these grades are: . Satisfactory . | Have no errors or warnings reported by the linter | Passes all of the Gradescope tests for this function | . Meets minimum expectations . | Have no errors or warnings reported by the linter | Fails no more than one of the Gradescope tests for this function (while also passing at least one) | . Not Passing . | Does not meet the minimum expectations. | . When we say “no errors reported by the linter”, we mean the following: . | Have no style errors (may have warnings) as reported by npm run-script lint . | Have no @ts-ignore or eslint-disable annotations in the code that you write. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw1#rubric",
    "relUrl": "/assignments/hw1#rubric"
  },"10": {
    "doc": "Assignment 1: Venusians",
    "title": "Submission Instructions",
    "content": "Submit your assignment in GradeScope. The easiest way to get into GradeScope the first time is to first sign into Canvas and then click the link on our course for “GradeScope”. You should then also have the option to create an account on GradeScope (if you don’t already have one) so that you can log in to GradeScope directly. Please contact the instructors immediately if you have difficulty accessing the course on GradeScope. Submit your solution to Gradescope in the form of exactly two files, Venusian.ts and Ship.ts. Before submitting, be sure your code passes the sanity tests included in the starter package. GradeScope will provide you with feedback on your submission, providing a numeric score between 0 and 20. You will be able to view the complete output from running the tests and linter on GradeScope. If you have any doubts about the autograder, please contact the course staff immediately. In particular, if you are not able to reproduce and debug test or linter failures on your local machine, please ask the TAs for assistance: otherwise you’ll waste an immense amount of time waiting for the autograder to complete, when you could get the same feedback in seconds running the tests + linter locally. You may submit solutions as many times as you want; only the last submission before the deadline will be counted. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw1#submission-instructions",
    "relUrl": "/assignments/hw1#submission-instructions"
  },"11": {
    "doc": "Assignment 1: Venusians",
    "title": "Assignment 1: Venusians",
    "content": "Change Log . | 1/13/22: Initial Release | 1/16/22: Add pointer to textbooks page - JB | 1/18/22: Specify return types on Venusian class, and clarify that Venusian names are case-sensitive - JB | 1/19/22: Update spec for Venusian to clarify captialization of the member method getVsn, to match the test included in the handout. -JB | 1/19/22: Added a “Getting Started” section to help set up the development environment for the starter code locally. -SR | 1/20/22: Clarify that unique ID’s need only be unique for a single execution of your program and need not be globally unique IDs. -JB | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw1",
    "relUrl": "/assignments/hw1"
  },"12": {
    "doc": "Assignment 2: Conversation Areas",
    "title": "The new feature: Conversation Areas",
    "content": "In the original release of Covey.Town (demoed at https://spring2021.covey.town), users connect to a “Town”, which provides a 2D arcade-style map that users can walk around in. When two users get close, they are able to see and hear each other through a video call. Since that original release, our lead software engineer, Avery, has been quite busy on making this app more interesting and usable. One problem that Avery observed with the app was that users would focus on exploring the relatively small map, and then not know what to do: how do you have a conversation with someone else when there is nothing to indicate that you want to talk? If two people are talking, how does a third person know that it is OK to approach them and join the conversation? . Avery has developed an exciting new feature concept for Covey.Town this semester: Conversation Areas. Avery replaced the “outdoor” map from the original Covey.Town implementation with a new map for users to explore, which has some interesting sights to see and talk about, added text chat, and designed a new conversation areas feature, highlighted in the screenshot below: . Each conversation area is a rectangle on the map. In this screenshot, there are three conversation areas: “Foyer Table 4”, “Foyer Table 5”, and “Foyer Table 6”. There are two users who are engaged in a conversation at Foyer Table 5, who have labeled the current conversation topic to be “Talking about class”. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw2#the-new-feature-conversation-areas",
    "relUrl": "/assignments/hw2#the-new-feature-conversation-areas"
  },"13": {
    "doc": "Assignment 2: Conversation Areas",
    "title": "This Assignment",
    "content": "In this assignment, you will implement the backend service that supports the conversation areas feature, creating an implementation that behaves comparably to our public deployment of covey.town. Since this is your first time working in this codebase, Avery has sketched out a reasonable design for the Conversation Area API, and has mapped the design into implementation tasks. Avery has also provided a few sanity tests so that you can check your work. There is a complete set of tests available to you on GradeScope. This assignment does not involve any frontend development, but we will return to the frontend aspects of the Conversation Area feature in HW4. Based on past experiences, we project that this assignment could take you up to 20 hours (depending on your prior preparation). We encourage you to start early so that you can post questions on Piazza, make the most use of our TAs’ tutorials, and attend office hours as necessary in order to ensure that you can reach full marks across the board. Please note that while Part 2 looks shorter, this is mainly an artifact of us providing you with less detailed steps of what you need to do: it might take you just as long as Part 1, so do not assume that it will be a quick last few steps! . Learning Objectives . The objectives of this assignment are to: . | Read an architectural diagram and apply that design to an implementation | Expand an existing API following the coding conventions set out in an existing codebase | Translate high-level requirements into code | Become familiar with the Covey.Town codebase, which will be reused in HW3, HW4, and your final project | . You are encouraged to write tests for your implementation, however we will not grade your tests on this assignment. Grading . Your code will automatically be evaluated for linter errors and warnings. Submissions that have any linter errors will automatically receive a grade of 0. Do not wait to run the linter until the last minute. Please note that you can check for linter issues before submitting by running npm run lint; many formatting issues can also be automatically fixed by running npm run format. Each implementation task will be automatically graded by our test suite on GradeScope. You may resubmit your code an unlimited number of times for feedback. Each task is allocated a set number of points based on its complexity. There are no partial marks for passing some, but not all of the tests for a function. GradeScope will provide feedback on which checks your implementation fails. Your code will be manually evaluated for conformance to our course style guide. This manual evaluation will account for 10% of your total grade on this assignment. We will manually evaluate your code for style on the following rubric: . To receive all 10 points: . | All new names (e.g. for local variables, methods, and properties) follow the naming conventions defined in our style guide | All public properties and methods (other than getters, setters, and constructors) are documented with JSDoc-style comments that describes what the property/method does, as defined in our style guide | The code that you write generally follows the design principles discussed in week one. In particular, your design does not have duplicated code that could have been refactored into a shared method. | . We will review your code and note each violation of this rubric. We will deduct two points for each violation, up to a maximum of deducting all 10 style points. General Requirements . This is an individual assignment. Please post any questions about this assignment on Piazza. We have many sections of this class, and we want to make sure that we respond to your questions the same way, regardless of which section you are in. You may not make changes to package.json or to the lint configuration. You may not use ts-ignore or eslint-disable annotations. How To Use GradeScope’s Test Suite Effectively . We have provided a very thorough test suite on GradeScope, but our goal is for you to not rely on this test suite for debugging your code, and instead rely as an objective ground truth to determine if you have successfully implemented a task or not. You will not see detailed failure messages on GradeScope, and any console output is hidden. The names of each of the tests describe loosely what inputs the test is providing to your application, but not the detailed criteria that each test is checking for. The tests, broadly, check for the behaviors that are described in this specification. If you are struggling to understand why a test isn’t passing, we suggest a strategy called “rubber duck debugging”: Reread the specification. Read through your code line by line, thinking about and explaining what it does - as if you were explaining it to a colleague or the TA. Do NOT try to think too much about what tests you are or are not passing: think about the specification, and what you think your code does, and what it actually appears to do as you read it. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw2#this-assignment",
    "relUrl": "/assignments/hw2#this-assignment"
  },"14": {
    "doc": "Assignment 2: Conversation Areas",
    "title": "Part 1: Base implementation of TownService’s ConversationArea API [60 points total]",
    "content": "Your first major objective for this assignment will be to create a base implementation of the ConversationArea API in the backend TownService. By the end of this part of the assignment, you will have implemented a createConversationArea API endpoint, which will create a new ConversationArea on the server, and extended the existing TownJoinHandler so that when a player joins a town and receives the initial state of the town, the list of ConversationAreas will be included in that response. Start by downloading this starter code. Extract this archive and run npm install to fetch the dependencies. Avery has provided you with some very basic sanity tests that you can extend for testing your implementation as you go. Each ConversationArea exists within a single Town in the overall Covey.Town data model. Hence, you will implement the ConversationArea API in the context of the existing service that implements the logic to manage each town. The diagram below outlines the major components in the existing TownsService. Referring to the diagram above, you’ll start by implementing the ConverstationArea API at the Router level, defining the API in terms of an HTTP endpoint (Task 1.1). Then, you will implement the business logic to create new ConversationAreas in a request handler, and in CoveyTownController (Task 1.2). Lastly, you’ll update the existing request handler that processes a player’s request to join a town so that this response also includes the list of current ConversationAreas (Task 1.3). Task 1.1: Add an HTTP route to create conversation areas [5 points] . Your first task is to add a request handler to the TownsService to receive client requests to create a new conversation. In the Towns Service architecture diagram above, this task will require modifying the Router to know about our new REST API endpoint. Avery has already decided on the API’s specification, and in fact has already also created a client that coforms to that specification - so you will be able to start testing your implementation right away. Here is the specification of the new route that you need to add for this API: . | URL: /towns/:townID/conversationAreas (where :townID is a parameter that specified the town in which the conversation area should be created) | HTTP Method: post | Body: JSON, the body matches the type ConversationAreaCreateRequest, defined in src/client/TownsServiceClient.ts and reproduced below | . /** * Payload sent by the client to create a new conversation area */ export interface ConversationAreaCreateRequest { coveyTownID: string; sessionToken: string; conversationArea: ServerConversationArea; } . Avery’s sanity test for this task uses their API client to make a request to create a conversation area. You can run it right now, by running the command npm test CoveyTownConversationAPI. Before you implement this task, you should expect to see the tests fail, with a message Request failed with status code 404 (404 is the error code that indicates that an address does not exist). The route. Following the example routes that already exist in router/towns.ts, create the new route as specified above in the file router/towns.ts. Your route should follow the conventions in the other routes: forward the request on to the conversationAreaCreateHandler and record the response. If conversationAreaCreateHandler throws no error, then return the response from the handler as JSON, with the HTTP status code OK. If conversationAreaCreateHandler throws an error, log the error and return a response with HTTP status INTERNAL_SERVER_ERROR, a JSON response of {message: 'Internal server error, please see log in server for more details'}. The router interfaces with the HTTP server through the variable app, which in our case, is a library called ExpressJS. For tips on working with Express, see the ExpressJS routing docs . 📝 Check your work: When you run the sanity test, it should still fail, but this time with the message “Error processing request: This feature is not yet implemented” (the default behavior of conversationAreaCreateHandler). If you get this message, then you have successfully completed this first task! . Note: Due to the complexity of writing these tests to work with partial implementations, the GradeScope tests for Task 1.1 will not pass until after you get to Task 1.3. The Task 1.2 tasks do not have this dependency: so once you are fairly certain that Task 1.1 is implemented correctly, continue with the rest of Task 1, and don’t expect the GradeScope tests for Task 1.1 to pass until after you implement 1.3. Task 1.2: Implement business logic to create a conversation area [45 points total] . With the top of the architecture stack implemented, it’s now time to implement some business logic to actually create a conversation area. This task will require you to implement three methods, and you will receive partial credit for this task at the level of each of the implementation methods: . | conversationAreaCreateHandler [15 points] | addConversationArea [30 points] | . Task 1.2a conversationAreaCreateHandler [15 points] . When the conversationAreaCreateHandler is called, it should: . | Validate that the supplied session token is a valid token for the specified town | Delegate the actual responsibility for creating the conersation area to the CoveyTownController, invoking the addConversationArea method on the appropriate town controller. | . If the token is valid and the conversation area is successfully created, set return the isOK parameter on the returned response to true, the response property to {}, and the message to undefined. If not successful for any reason, set the return isOK to false, and set the message to exactly the string: Unable to create conversation area &lt;conversationAreaLabel&gt; with topic &lt;conversationAreaTopic&gt; (replacing the values in &lt;&gt; with the parameters that were passed). For example, if a request to create a conversation area with label foo and topic bar fails, the returned message should be Unable to create conversation area foo with topic bar. 📝 Check your work: When you run the API sanity test suite (npm test CoveyTownConversationAPI), you should now see “Executes without error when creating a new conversation” succeed. Other tests may fail. Task 1.2b addConversationArea [30 points] . Implement the method addConversationArea method in CoveyTownController. Recall from the architectural diagram above that the CoveyTownController is responsible for keeping track of all of the state regarding a single town, including its conversation areas. Avery has already added a private field, _conversationAreas to CoveyTownController. Your task is to implement the addConversationArea method, which should have the following behavior: . | Check that the topic is defined: it is not permitted to create a conversation area an empty string as the topic, if this is the case return false. | Check to see if there is an existing conversation area with the requested label, and if one already exists, return false. | Check to see if the boundingBox of the new conversation area overlaps with any existing, and if so, return false. | Boxes are allowed to be adjacent that is, two conversation areas may share boundary points. | The x, y position of the box denotes the center of the box on the map, height and width represent the overall height and width of the box. | . | Any players who are in the region defined by the boundingBox of the new conversation area should be added to it as occupants, and those players should have their _activeConversationArea property set to that new conversation area. | A player is defined as inside of a box if the x, y position of the player is anywhere within the bounding box. A player who overlaps only with the edge of a conversation area’s bounding box is not in the box. | This behavior only applies when a conversation area is created. After the conversation area is created, the server does not rely on the x,y position of a player to determine which conversation area they are in, and instead relies on the players’ self-reported location.conversationLabel as the source of truth. | . | Notify all listeners that are subscribed to this town that the newly created conversation area was created, by invoking onConversationAreaUpdated(theNewConversationArea) on each. | . This is a much bigger task than the first one. Note that you will undoubtedly find it useful to add new helper methods (private or public), perhaps in CoveyTownController, Player, or both. You must not add additional fields to track the conversation area’s state: the data model that Avery defined is the data model that you must use! . 📝 Check your work: Avery has also provided a single unit test for addConversationArea, which you can run with npm test -- -t 'CoveyTownController addConversationArea'. You can also run this test directly in VSCode. Of course, you may find it useful to write additional tests (either writing new tests, or modifying the behavior of this one to check more interesting behaviors). There is also a complete test suite for this task on GradeScope. Task 1.3: Include current conversation areas in join response [10 points] . If you completed task 1.2 correctly, then all players who are in the town when a new converation is made will be notified of the new converation area. The last task to complete before we can move on to frontend implementation of this feature is to update the backend service to include the list of all current conversation areas when a new player joins the town. In the file CoveyTownRequestHandler.ts, examine the method townJoinHandler and the type TownJoinResponse. Your objective for this task is to update the TownJoinResponse type to include a new field, conversationAreas, of type ServerConversationArea[], and to update the townJoinHandler to include the current list of converation areas for the town that the user has joined. 📝 Check your work: Run npm test CoveyTownConversationAPI again, you should now see the test “Includes newly created conversations when a new player joins” pass. Checkpoint, check your work on this entire task . We suggest that you submit your code at this point on GradeScope, which will run Avery’s extremely thorough test suite on your code. If there are test errors, you will likely find it easier to debug them now rather than moving on to implement more code (and perhaps introduce more bugs). ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw2#part-1-base-implementation-of-townservices-conversationarea-api-60-points-total",
    "relUrl": "/assignments/hw2#part-1-base-implementation-of-townservices-conversationarea-api-60-points-total"
  },"15": {
    "doc": "Assignment 2: Conversation Areas",
    "title": "Part 2: Completing the TownService responsibilities [30 points total]",
    "content": "Congratulations on making it this far! You are almost done, there are only two more tasks to complete the feature. Task 2.1: Track conversation area participants [15 points] . In Avery’s design, each of the users connected to a town track which conversation area (if any) they are in, and send this information to the CoveyTownController. The CoveyTownController needs to track which users are in each conversation. CoveyTownController has a method updatePlayerLocation, which is called each time that a player’s location changes. You should use the conversationLabel property on the UserLocation that is passed to updatePlayerLocation to identify the user’s current conversation area (as reported by that user). You should preserve the existing behavior of updatePlayerLocation, in particular, ensuring that onPlayerMoved is still emitted . Your objective for this task is to implement functionality so that at the end of the execution of this method, the _conversationAreas list tracked by the town controller reflects that player’s transition between conversation areas, updating the occupantsByID property on any effected conversation areas. You must also update the Player instance, setting the property activeConversationArea to point to the corresponding ServerConversationArea in the _conversationAreas array (or undefined if they are no longer within one). If any conversation areas are updated, you must emit a onConversationAreaUpdated event, similarly to how you did in Task 1.2 when a conversation is created. Note that you might need to send multiple onConversationAreaUpdated events: one for a user leaving an area and one for them entering another. It is important that no client ever believe that a user is in two conversation areas at the same time. Hence, be sure to send the “exit” update before the “enter” update. 📝 Check your work: Again, Avery has provided a single sanity test that checks some of the behavior defined above. You can run this test with the command npm test -- -t 'CoveyTownController updatePlayerLocation', and you might also consider extending it. Task 2.2: Remove participants from conversation area if they disconnect [10 points] . When a player disconnects from the server, there is no “movement” that happens, but any resources used by that player are cleaned up by the CoveyTownController’s destroySession method. Update destroySession to remove disconnected players from any conversation area that they had been a participant in and emit any onConversationAreaUpdated events as necessary. 📝 Check your work: Avery has not provided you with a sanity test for this task. Consider testing it manually, or enhance the sanity test that they provided to test this behavior. Task 2.3: Automatically end a conversation area when it’s unoccupied [5 points] . Avery has implemented logic on the frontend to show a default greeting message when there is no conversation area defined for a space. The code that you are implementing, then, needs to notify the frontend when a conversation area becomes unoccupied. When the last player leaves a conversation area emit the onConversationAreaDestroyed(destroyedArea:ServerConversationArea) event to each of the town controller’s listeners, and then remove that conversation area from the town controller’s list of conversation areas. When the last player leaves a conversation area, there is no need to emit a onConversationAreaUpdated. 📝 Check your work: Avery has not provided you with a sanity test for this task. Consider testing it manually, or enhance the sanity test that they provided to test this behavior. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw2#part-2-completing-the-townservice-responsibilities-30-points-total",
    "relUrl": "/assignments/hw2#part-2-completing-the-townservice-responsibilities-30-points-total"
  },"16": {
    "doc": "Assignment 2: Conversation Areas",
    "title": "Submission Instructions",
    "content": "Submit your assignment in GradeScope. The easiest way to get into GradeScope the first time is to first sign into Canvas and then click the link on our course for “GradeScope”. You should then also have the option to create an account on GradeScope (if you don’t already have one) so that you can log in to GradeScope directly. Please contact the instructors immediately if you have difficulty accessing the course on GradeScope. To submit your assignment: run the command npm run-script zip. GradeScope will provide you with feedback on your submission, but note that it will not include any marks that will be assigned after we manually grade your submission for code style (it will show 0 for this until it is graded). ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw2#submission-instructions",
    "relUrl": "/assignments/hw2#submission-instructions"
  },"17": {
    "doc": "Assignment 2: Conversation Areas",
    "title": "Assignment 2: Conversation Areas",
    "content": "Change Log . | 1/28/22: Initial Release | 1/29/22: Clarify expected return type of conversationAreas route | 1/31/22: Clarify route specification, clarify behavior of updatePlayerLocation (2.1), update handout test for 2.1 to clearly specify the intended location to use is userLocation.conversationLabel (diff) | 2/4/22: Clarify task 2.3 introductory language (diff) | 2/5/22: Clarify conversation -&gt; conversation area; rework 2.3 text to be clearer (diff) | 2/6/22: Add note clarifying that Task 1.1 tests can not run on GradeScope until after Task 1.3 is completed; this does not impact Task 1.2 | 2/9/22: Add debugging tips | 2/9/22: Clarified that 2.1 should not make a copy/clone of the conversation area | 2/10/22: Clarified that existing behavior (e.g. emitting onPlayerMoved) must be preserved in order to pass tests | . Welcome aboard to the Covey.Town team! We’re glad that you’re here and ready to join our development team as a new software engineer. We’re building an open source virtual meeting application, and are very happy to see that we have so many new developers who can help make this application a reality. Covey.Town is a collective effort of many contributors, and by the end of the semester, you will have the option to submit a pull request to merge a new feature into the codebase, and become a direct contributor yourself. We understand that some of you may have some web development experience, but don’t expect that most of you do, and hence, have created this series of three individual assignments to help you get up to speed with our existing codebase and development environment. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/hw2",
    "relUrl": "/assignments/hw2"
  },"18": {
    "doc": "CS4530, Spring 2022",
    "title": "CS4530, Spring 2022: Fundamentals of Software Engineering",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/#cs4530-spring-2022-fundamentals-of-software-engineering",
    "relUrl": "/#cs4530-spring-2022-fundamentals-of-software-engineering"
  },"19": {
    "doc": "CS4530, Spring 2022",
    "title": "Teams Posted, Project Pitch Released",
    "content": "Feb 11 &middot; 0 min read Team assignments are now available on piazza, and the first team deliverable, the project pitch is now available as well. Announcements . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/",
    "relUrl": "/"
  },"20": {
    "doc": "CS4530, Spring 2022",
    "title": "Overview",
    "content": "Building, delivering and maintaining successful software products requires more than being good at programming. Software engineering encompasses the tools and processes that we use to design, construct and maintain programs over time. Software engineering has been said to consider the “multi person development of multi version programs.” Development processes that work well for a single developer do not scale to large or even medium-sized teams. Similarly, development processes that work well for quickly delivering a one-off program to a client cause chaos when applied to a codebase that needs to be maintained and updated over months and years. This class will begin to explore these tradeoffs throughout the entire software development lifecycle, with a particular focus on how these decisions affect the quality of the resulting software. This class will serve as an introduction to the field of software engineering, covering key topics such as: . | Requirements gathering and specification How to make sure that you build the product that your customer really wants | Designing code for reuse, for readability, and for scale How to avoid reinventing the wheel? What makes code readable? Where does performance fit into designs? When do we decide when to revisit old design decisions, and how do we replace them? Can we avoid the mistakes that past developers have made? | How to organize your development process to collaborate effectively How do we communicate our designs with others? How do we structure and coordinate development activities? How do we measure the performance of these processes, and tweak them over time? | How to ensure that your code works, is secure, and broadly speaking, “does the right thing” How do we measure different quality attributes like usability, scalability and performance? How do we minimize the cost of defects? How do we automatically test complex systems? Can we automatically prove the absence of some kinds of defects? | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/#overview",
    "relUrl": "/#overview"
  },"21": {
    "doc": "CS4530, Spring 2022",
    "title": "Course Outcomes",
    "content": ". | Students will be able to define and describe the phases of the software engineering lifecycle (requirements, design, implementation, testing, deployment, maintenance) | Students will be able to explain the role of key processes and technologies in modern software development. | Students will be able to productively apply instances of major tools used in elementary SE tasks. | Students will design and implement a portfolio-worthy software engineering project in a small team environment that can be publicly showcased to recruiters. | . Course Delivery . The course will be delivered in a “traditional” lecture style. Prof Wand’s section will be entirely virtual, and the other sections will be entirely on-the-ground, with no virtual participation option. You must attend the section for which you have registered, and you may not partner with students in other sections for the term project. | Section | Instructor | Meeting Time | Meeting Place | . | 1 | Prof Bhutta | MR 11:45 am - 1:25 pm | West Village H 110 | . | 2 | Prof Bell | MR 11:45 am - 1:25 pm | West Village G 108 | . | 3 | Prof Bhutta | MW 2:50 pm - 4:30 pm | Shillman Hall 220 | . | 4 | Prof Vesely | TF 8:00 am - 9:40 am | Robinson Hall 411 | . | 5 | Prof Wand | W 6:00 pm - 9:20 pm | Online | . | 6 | Prof Bhutta | T 11:45 am - 1:25pmR 2:50 pm - 4:30 pm | Knowles Center 010 | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/#course-outcomes",
    "relUrl": "/#course-outcomes"
  },"22": {
    "doc": "CS4530, Spring 2022",
    "title": "Course Project",
    "content": "The assignments and project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we’ll be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. At the end of the semester, the instructors and TAs will evaluate all of the student projects, and select the best (in terms of usability, code quality, test suite quality, and overall design) to merge into the open source Covey.Town codebase on GitHub repository. No additional course credit will be awarded to these teams, but these students will have the opportunity to receive public recognition for their project (in the form of a pull request merged into our repository and acknowledgements in the project’s contributors list). The project will provide hands-on experience to complement the skills taught in this class, requiring students to be able to: . | Work effectively in a small team | Enumerate and prioritize development tasks | Propose, design, implement and test a new feature in an existing non-toy software application | Write code that their team members can read and review | Review teammates’ code | Analyze a proposed software architecture | Use relevant software tools, such as: . | TypeScript | Visual Studio Code (or similar IDE) | Git | Mocha and Jest | Twilio’s Programmable Video API | Postman | . | . Select projects from Spring 2021 are hosted in our project showcase. Acknowledgements . This class and its contents were inspired by Software Engineering courses at various institutions, including: . | Columbia’s Software Engineering Course, COMS W4156 | CMU’s Software Engineering Course, 17-313 | GMU’s Web App Development Course, SWE 432 | NCSU’s Software Engineering Course, CSC 326 and its iTrust term project, also Chris Parnin’s DevOps course. | Past iterations of CS5500 at Northeastern, as prepared by Mike Weintraub, Mike Shah, and Frank Tip. | . This website is built using Kevin Lin’s Just the Class Jekyll template. The term project, Covey.Town, is built using code from the Clowdr open source project. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/#course-project",
    "relUrl": "/#course-project"
  },"23": {
    "doc": "CS4530, Spring 2022",
    "title": "CS4530, Spring 2022",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/",
    "relUrl": "/"
  },"24": {
    "doc": "Modules",
    "title": "Modules",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/modules/",
    "relUrl": "/modules/"
  },"25": {
    "doc": "Policies",
    "title": "Homework policy",
    "content": "Students must work individually on all homework assignments. We encourage you to have high-level discussions with other students in the class about the assignments, however, we require that when you turn in an assignment, it is only your work. That is, copying any part of another student’s assignment is strictly prohibited, and repercussions for doing so will be severe (up to and including failing the class outright). You are free to reuse small snippets of example code found on the Internet (e.g. via StackOverflow) provided that it is attributed. If you are concerned that by reusing and attributing that copied code it may appear that you didn’t complete the assignment yourself, then please raise a discussion with the instructor. Your work is late if it is not turned in by the deadline. | 10% will be deducted for late assignments turned in within 24 hours after the due date. | Assignments submitted more than 24 hours late will receive a zero. | . If you’re worried about being busy around the time of a HW submission, please plan ahead and get started early. Homework that does not compile or run will receive at most 50% credit. For fairness to all, there are no exceptions to the above rules. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/#homework-policy",
    "relUrl": "/policies/#homework-policy"
  },"26": {
    "doc": "Policies",
    "title": "In Class Activities:",
    "content": "Most lectures will feature interactive activities and/or polls that support the material being presented. You must be present in class to complete the activity or take the poll (participating in an online activity while not attending the synchronous session will be considered academic dishonesty and will be treated harshly). Each instructor may have a different style for assigning participation grades, but historical grading information suggests that each style results in a similar overall grade distribution. Participation grades will be posted on Canvas, and regularly updated. If you join class in person, you are strongly encouraged to bring your laptop or phone to class so that you can participate in the activities. Policy on remote attendance . We would like to provide the best and most comfortable learning experience, and encourage you to stay at home if you are ill, and upon request, will provide remote access to our classes (please contact your instructor by email as soon as possible preferably few hours before the class). We are following guidance and regulations set by the Provost’s office. In short: if you are registered for an on-the-ground section but do not feel comfortable or are unable to attend in person for a short duration (e.g. one or two weeks) due to either your illness or heightened concern for your or your roommates/family’s health, we will provide access to attend class those weeks remotely. However, we have been asked to be extremely attentive that we only provide this access for a maximum of two weeks. If you anticipate being unable to attend class in person for more than two weeks, please reach out to the Disability Resource Center, which is coordinating a process to provide longer-term access to remote resources. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/#in-class-activities",
    "relUrl": "/policies/#in-class-activities"
  },"27": {
    "doc": "Policies",
    "title": "Grading",
    "content": "There will be four programming assignments and a final project. You will complete the assignments individually, and the project in a group of 3-4. The overall grading breakdown is: . | 35% Individual homework assignments | 35% Team final project | 10% Participation in synchronous, in-class activities | 20% Exam | . Assignment of final grades: Although each instructor will use the same lesson plans and assignments, we expect that there may be variation in grades when compared between sections. Hence, each instructor will assign final grades to students in their sections, and reserve the right to apply different curves than are used by the other instructors. With each graded assignment, students will be provided with the distribution of all grades in their section. Grading grievances: If you have concerns regarding the grading of your work, please let us know right away by opening a regrade request in GradeScope. Do not post on Piazza or your TA or instructor: GradeScope provides an interface that allows us to review all regrade requests in one place. All regrade requests must be submitted within 7 days from your receipt of the graded work. If your regrade request is closed and you feel that the response was not satisfactory, you may appeal to the instructor via email within 48 hours. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/#grading",
    "relUrl": "/policies/#grading"
  },"28": {
    "doc": "Policies",
    "title": "Classroom Environment",
    "content": "To create and preserve a classroom atmosphere that optimizes teaching and learning, all participants share a responsibility in creating a civil and non-disruptive forum for the discussion of ideas. Students are expected to conduct themselves at all times in a manner that does not disrupt teaching or learning. Your comments to others should be constructive and free from harassing statements. You are encouraged to disagree with other students and the instructor, but such disagreements need to respectful and be based upon facts and documentation (rather than prejudices and personalities). The instructors reserve the right to interrupt conversations that deviate from these expectations. Repeated unprofessional or disrespectful conduct may result in a lower grade or more severe consequences. Part of the learning process in this course is respectful engagement of ideas with others. Please don’t be late. You are an essential part of the class. Your participation is an essential part of the class. If you are late, please be courteous to others when entering. BE PRESENT WHEN YOU ARE ATTENDING CLASS. Please do not distract yourself from the class by doing other activities such as phone calls, email, facebook, chat/IM/texting, games, web surfing – unless it has a direct bearing on the course. Then, by all means, surf away! . Attendance in the synchronous meetings is expected. Sometimes you cannot avoid missing a class. If you need to be away from class, it is your responsibility to catch up on the materials discussed in the class. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/#classroom-environment",
    "relUrl": "/policies/#classroom-environment"
  },"29": {
    "doc": "Policies",
    "title": "Accommodations for Disabilities",
    "content": "Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Resource Center at 20 Dodge Hall or call (617) 373-2675. If you have already done so, please provide your letter from the DRC to the Instructor early in the semester so that they can arrange those accommodations. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/#accommodations-for-disabilities",
    "relUrl": "/policies/#accommodations-for-disabilities"
  },"30": {
    "doc": "Policies",
    "title": "Title IX Notice",
    "content": "Title IX of the Education Amendments of 1972 protects individuals from sex or gender-based discrimination, including discrimination based on gender-identity, in educational programs and activities that receive federal financial assistance. Northeastern’s Title IX Policy prohibits Prohibited Offenses, which are defined as sexual harassment, sexual assault, relationship or domestic violence, and stalking. The Title IX Policy applies to the entire community, including students, faculty and staff of all gender identities. If you or someone you know has been a survivor of a Prohibited Offense, confidential support and guidance can be found through University Health and Counseling Services staff and the Center for Spiritual Dialogue and Service clergy members. By law, those employees are not required to report allegations of sex or gender-based discrimination to the University. Alleged violations can be reported non-confidentially to the Title IX Coordinator within The Office for Gender Equity and Compliance at: titleix@northeastern.edu and/or through NUPD (Emergency 617.373.3333; Non-Emergency 617.373.2121). Reporting Prohibited Offenses to NUPD does NOT commit the victim/affected party to future legal action. Faculty members are considered “responsible employees” at Northeastern University, meaning they are required to report all allegations of sex or gender-based discrimination to the Title IX Coordinator. In case of an emergency, please call 911. Please visit www.northeastern.edu/ouec for a complete list of reporting options and resources both on- and off-campus. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/#title-ix-notice",
    "relUrl": "/policies/#title-ix-notice"
  },"31": {
    "doc": "Policies",
    "title": "Policies",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/",
    "relUrl": "/policies/"
  },"32": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "The assignments and project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we’ll be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. Select projects from Spring 2021 are hosted in our project showcase. Overview of Project Deliverables . | Date | Deliverable | Description | . | 2/9/22 | Team Formation | Specify preferences for teammates | . | 2/18/22 | Kickoff Team Meeting | Meet with your assigned TA mentor to discuss your project concept | . | 2/25/22 | Project Pitch | Propose a new feature for Covey.Town that can be implemented within 5 weeks | . | 3/11/22 | Project Plan | Refine the scope of your feature based on staff feedback, define detailed requirements and project acceptance criteria. Propose a high-level design. | . | 4/22/22 | Project Implementation and Documentation | Deliver your new feature, including design documentation and tests | . Team Formation . All projects will be completed in a team of 4-5 students. The very first deliverable for the project will be a team formation survey: you will be able to indicate your preferences for teammates. The instructors will assign students to the teams based on a number of factors including your responses to the survey. All students in each team must be in the same section of the class. Complete the team formation before Feb 9. Team Meetings with TA Mentor . Each team will be assigned a TA to act as a mentor, who will also serve as your point of contact for project grading. During the week of February 14-18, you will have a “Kickoff Meeting” with your TA mentor, where you will meet your TA mentor and have the opportunity to share any early ideas that you might want feedback on before submitting the project pitch. Once project begins in full force, you will have weekly meetings with your TA mentor (scheduled at your team’s and the TA’s convenience) in order to help ensure that you are making progress on the project, and to help address problems that you encounter (be they technical or non-technical problems). Project Pitch . All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide what kind of new feature you would like to build. Your feature should be something that can be implemented within the timeframe allotted (5 weeks), and will be implemented in a fork of the main Covey.Town codebase. Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of four, we expect that the feature that you propose will be more complex than the feature implemented in the individual homeworks. The project pitch assignment will be released on February 11th. Project Plan . Based on the feedback that you receive from the course staff, you will propose a detailed plan to implement your new feature. The project plan will include: . | Revised user stories and conditions of satisfaction (based on feedback on the project pitch) | Revised design documents (based on feedback on the project pitch) | Work breakdown: Map your user stories to engineering tasks. Assign each task to a team member (or pair of team members), provide an estimate for how long each task will take, a rationale for that estimate, and schedule those stories into 2 week sprints. | . Your team will self-organize, as agile teams do and will use the work breakdown and schedule as the basis for weekly check-ins with your team’s TA. The project plan assignment will be released by February 18th. Project Implementation and Documentation . You will be assigned a mentor for your project who will work closely with you for the entire project. You will coordinate with the mentor to setup weekly meetings and regular sprint demos. Peer evaluation will also be used. Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. Optionally, you may also open a pull request to merge your feature into our main repository (submitting a pull request, or the pull request being merged into our codebase is independent of the grade you receive, but provides a platform for more visiblity of your project). Your final team deliverable will include: . | The implementation of your new feature | Automated tests for your new feature | A README.md document that includes instructions to deploy Covey.Town with your new feature | A FEATURE.md document that describes the final version of your use cases | A DESIGN.md document that includes documentation of your design (using CRC cards, UML class diagrams, and/or UML sequence diagrams as you find necessary; remember that a picture is worth a thousand words!). In particular, for any change that you had to make to the existing codebase, provide a rationale for why the change was made, and what alternatives were considered. | A revised work breakdown, updated to reflect the work that was actually done and by whom | A 10 minute video that demonstrates the usage of your feature | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own, which will include your reflections on: . | The evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? | The software engineering processes that you feel could have been improved in your project: were there any procesess that in hindsight, you wish that you followed, or wish that you followed better? | Your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? | . The complete grading breakdown for the project, and details for the final project deliverable will be released by March 4th. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/project-overview",
    "relUrl": "/assignments/project-overview"
  },"33": {
    "doc": "Project Pitch",
    "title": "Project Pitch Due Friday Feb 25, 10:00pm EST",
    "content": "All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide what kind of new feature you would like to build. Your feature should be something that can be implemented within the timeframe allotted (5 weeks), and will be implemented in a fork of the main Covey.Town codebase. Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of four, we expect that the feature that you propose will be at least as complex as the feature implemented in the individual homeworks. Feel free to look at existing systems like Gather.Town, Sococo, Reslash, Screen, and Gatherly.IO for inspiration on new features to build for Covey.Town. Also see the recent NYTimes Magazine article The Race to Fix Fix Virtual Meetings (click here to access through NEU libraries). Examples of features that students might propose include: . | Create an interface for uploading and choosing between different maps and avatars (will require also learning to use the Phaser3 API) | Create an abstraction to allow for interaction with objects, for instance: walking up to a whiteboard on the map allows players to draw on a shared whiteboard | Add screenreader support - generate a textual representation of the map and what players can do to interact with it | Support real persistence: store data in a database (e.g. Postgres + GraphQL), allow users to register and save a profile (e.g. using Auth0) | Add direct messaging, image messaging, and other chat features | . Please note that multiple teams might choose to propose the same feature, or a variation of that same feature - this is OK. The course staff will provide feedback on your project to help ensure that the scope of your project is appropriate. When considering your project, please keep in mind that you will be allowed to publicly post your project online: while your immediate audience for the project is the course staff, if you are ultimately looking for software engineering jobs or co-ops, this project can be a useful piece of your portfolio. If you build a sufficiently maintainable feature (i.e., if your project is particularly well architected and tested), we will also consider pull requests to merge your feature into the main Covey.Town codebase on GitHub, allowing you to also tell recruiters that you have contributed a feature to an open source project on GitHub! . Your project pitch must include: . | An introductory problem statement: what problem in Covey.Town does your (proposed) feature solve? Provide a paragraph (or two) that describes why you are interested in building this feature. | User stories and acceptance criteria: high level description of how users will interact with your new feature. User stories are requirements specified in the format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. You should include three different user stories to describe how users will interact with your feature. Your three user stories should cover the key behavior that your feature will provide. Do not provide more than three user stories. Your description of user stories and conditions of satisfaction should be between 2-4 pages. | Preliminary class-level design (CRC cards): Start to think about how you will implement this feature. What are the new classes that you are going to add to the Covey.Town codebase, and how will they interact with any existing classes? Create CRC cards that demonstrate the way that your feature will fit in with the existing codebase, creating cards for your new classes, and for any existing classes that you will anticipate modifying. Please refer to Lesson 2.4 (slides 20-21) for more details about CRC cards, and examples of CRC cards. Attach your CRC cards to your project pitch document. Your CRC cards should be between 2-4 pages. | . You can find good examples of user stories on this GSA website. The most important part of this process is for you to convey to us what feature you plan to build, how you expect it to be used, and once it’s built, how you will judge that it is built correctly. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/project-pitch#project-pitch-due-friday-feb-25-1000pm-est",
    "relUrl": "/assignments/project-pitch#project-pitch-due-friday-feb-25-1000pm-est"
  },"34": {
    "doc": "Project Pitch",
    "title": "Submission",
    "content": "Your project pitch should be no longer than 8 pages in length (with no more than 4 pages for the user stories and no more than 4 pages for the CRC cards), and submitted as a PDF in GradeScope to the assignment “Project Pitch.” Each team submits a single document to GradeScope: when uploading the submission, GradeScope will ask you who your teammates are, and then will associate this submission with every member of your team. This assignment is due Feb 25. In order to provide timely feedback on your project pitch, we can not allow any DRC accomodations for late submissions on this assignment. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/project-pitch#submission",
    "relUrl": "/assignments/project-pitch#submission"
  },"35": {
    "doc": "Project Pitch",
    "title": "Grading",
    "content": "The project pitch will account for 10% of your project grade. The grading of the project pitch is further broken down as follows: . Introductory problem statement (10%): . | Receive full marks if there is a narrative consisting of 4-10 sentences that describes a specific problem that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe a problem that the project aims to solve | . User stories (60%): Each of the three user stories will account for 20% of your grade on this assignment and graded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature, and any relevant error cases | . | . CRC cards (30%): Your CRC cards will be evaluated holistically on the following rubric: . | There are a sufficient number of CRC cards provided such that it will be possible to define realistic engineering tasks to implement your feature based on the classes and their responsibilities. | The names of new classes must follow our course style guide. | Each CRC card must include a short phrase or two describing the responsibilities of the type in the context of the application | Each CRC card must include all relevant collaborators (when these can be determined from the codebase) | Each CRC card must include a description of the state that is kept by objects of the class. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/project-pitch#grading",
    "relUrl": "/assignments/project-pitch#grading"
  },"36": {
    "doc": "Project Pitch",
    "title": "Project Pitch",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/assignments/project-pitch",
    "relUrl": "/assignments/project-pitch"
  },"37": {
    "doc": "Other Resources",
    "title": "Other Resources",
    "content": "There are many articles, blogs, books and podcasts that are very interesting for more reading on the topics discussed in class. We’ll update this list as the semester goes, and if you have suggestions of materials to share, please let us know and we’ll add it to the list. Podcasts . The Software Engineering Radio podcast (also available wherever you get your podcasts) aims to produce educational material for professional softare developers, and includes conversations between experts and researchers on various software engineering topics. Here are a few of our favorites that are most relevant to topics that we cover in this class: . | Donny Nadolny on Debugging Distributed Systems, with Robert Blumen, 2017 | Jafar Soltani on Continuous Delivery for Multiplayer Games, with Nate Black, 2018 | Chris Richardson on Microservice Patterns, with Robert Blumen, 2019 | Margaret Burnett on Gender, Cognitive Styles and Usability Bugs, with Felienne Hermans, 2019 | Michaela Greiler on Code Reviews, with Felienne Hermans, 2020 | Ipek Ozkaya on Managing Technical Debt, 2021 | . Code style . | Research paper: To camelcase or under_score, Dave Binkley et al | Book (free via library): “Refactoring: Improving the Design of Existing Code” By Martin Fowler The definitive list of “code smells” that should be avoiding in programming, matched up with “refactoring” techniques to improve that code | . Debugging . | Book (free via library): “Effective Debugging: 66 Specific Ways to Debug Software and Systems” by Diomidis SpinellisA helpful guidebook for debugging, laying out different strategies that are effective for testing different kinds of debugging hypotheses. | . Design Patterns . | Book (free via library): “Design Patterns Explained: A New Perspective on Object-Oriented Design” by Alan Shalloway and James TrottIn-depth coverage of design patterns, considering why they are important in software development, how to apply them, and descriptions of some common patterns. | Book (free via library): “Refactoring to Patterns” by Joshua KerievskyA unification of the classic Gang of Four Design Patterns work with Fowler’s refactoring work, with practical example of how to introduce patterns into existing code bases to improve code quality. | “Fundamentals of Software Architecture” By Mark Richards and Neal Ford An overview of software architectural patterns and their role in successful software projects. | . Infrastructure + Operations . | Book (free via library) “Site Reliability Engineering” By Betsy Beyer, Chris Jones, Niall Richard Murphy, Jennifer Petoff Site Reliability Engineering is a topic very related to software engineering: while software engineers might focus primarily on the design and development of software systems, SRE’s are engineers who focus on the deployment, monitoring and maintenance of that software. This book documents the SRE practices at Google. | . JavaScript . | Book (free via library): “Modern JavaScript for the Impatient” by Cay Horstmann | . Program Understanding . | Book: “The Programmer’s Brain” by Felienne Hermans) A survey of research on programming and cognition, covering topics such as how to read code more effectively and how to write code that is easier to read and share. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/resources/",
    "relUrl": "/resources/"
  },"38": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": "| Dates | Topics | Notes | . | Jan 18-21 | Course OverviewDesign Principles | HW1 released | . | Jan 24-28 | Knowledge Sharing/Documenting DesignsDesign Patterns | HW1 due, HW2 released Team Formation &amp; Project Spec released | . | Jan 31-Feb 4 | Requirements &amp; Software ProcessAgile &amp; Team Dynamics |   | . | Feb 7-11 | Async programming + RESTDebugging | HW2 dueTeam formation due 2/9, Project Pitch Released | . | Feb 14-18 | Testing Intro, Unit Tests / Test Adequacy Measures | Kickoff Team MeetingHW3 released | . | Feb 21-25 | UI Design &amp; React / Testing Bigger Things | Project Pitch Due | . | Feb 28-Mar 4 | UI Testing / Pull Requests &amp; Code Review | HW3 due, HW4 released | . | Mar 7-11 | Deployment InfrastructureContinuous Development + DevOps | Project Plan due | . | Mar 14-18 | Spring Break! |   | . | Mar 21-25 | Software ArchitectureSE for Distributed Systems | HW 4 Due | . | Mar 28-Apr 1 | Static Analysis &amp; Bug-Finders / Code Smells &amp; Refactoring; Technical Debt |   | . | Apr 4-8 | Engineering Equitable SoftwareEstimation |   | . | Apr 11-15 | Team Meetings + Advanced Topics |   | . | Apr 18-22 | Demos | Final Project Report + Implementation Due | . | Apr 29, May 2 or May 4 | Final exam (online). The exam will be 2 hours, and we have scheduled 3 windows of 3 hours in which you may choose to take the exam: April 29 10am-1pm, May 2 4pm-7pm, May 4 6pm-9pm. |   | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/calendar/",
    "relUrl": "/calendar/"
  },"39": {
    "doc": "Staff",
    "title": "Staff",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/staff/",
    "relUrl": "/staff/"
  },"40": {
    "doc": "Staff",
    "title": "Office Hours",
    "content": "All office hours will be held virtually. Links to join the TA and instructor office hours are posted in Canvas. TA Office Hours are hosted on Microsoft Teams, using the Khoury Office Hours app. Please see the user guide for information on how to log in and ask questions. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/staff/#office-hours",
    "relUrl": "/staff/#office-hours"
  },"41": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Jonathan Bell . j.bell@northeastern.edu . Section: CS4530 Section 2 . Office Hours: Weds 2-3pm, Fri 9-10am . Adeel Bhutta . a.bhutta@northeastern.edu . Section: CS4530 Sections 1 &amp; 3 &amp; 6 . Office Hours: Mon 1:40-2:40pm, Tues 2-3pm, Thurs 1:40-2:40pm . Ferdinand Vesely . f.vesely@northeastern.edu . Section: CS4530 Section 4 . Office Hours: Fri 10:30-11:30am . Mitch Wand . wand@ccs.neu.edu . Section: CS4530 Section 5 . Office Hours: Thu 12-1pm . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/staff/#instructors",
    "relUrl": "/staff/#instructors"
  },"42": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Aditi Shrivastava . Aishwarya Gopal Sharma . Gibby Free . Gwendolyn Payne . Harsh Hasmukh Parmar . Harsh Pandya . Kanishka Soni . Kartik Tickoo . Mihir Manek . Monil Hemang Diwan . Pooja Ramakrishnan . Rajat Manish Bhagat . Sanjana Dabbiru . Shashwat Mehul Rathod . Shubham Sonawane . Tanish Sehgal . Vaishnavi Rakeshbhai Shah . Zefeng Wang . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/staff/#teaching-assistants",
    "relUrl": "/staff/#teaching-assistants"
  },"43": {
    "doc": "Code Style",
    "title": "Code Style",
    "content": "Programs are easier to read and to understand when they are written in a familiar style and follow standard coding conventions. Most organizations that develop software therefore require programmers to write programs that follow the organization’s preferred style and coding conventions. These conventions can be very elaborate. Many of the guidelines are, in fact, arbitrary. When you are working on a coding project with other developers, different developers often have preference for slightly different syntax, for instance: should our string literals be enclosed by single quotes (') or double quotes (\")? Should files be indented with spaces or tabs? In TypeScript, there are often multiple ways to accomplish the same goal, for instance, you could create a new empty array with the expression const myArray = new Array(), or const myArray = []. Sometimes there is no difference between these variants except for how it reads, and other times there may be unintended consequences of making the seemingly correct but subtly wrong choice. Thankfully, it is possible to write automated checkers (and, at times, fixers) for these style violations. All code that you write for this class will be checked by ESLint, and must be free of style warnings and errors. Our ESlint rules are derived from Airbnb’s JavaScript Style Guide, ESLint’s Recommended Rules, TypeScript/ESLint Recommended Rules, React ESLint Rules and React Hooks ESLint Rules. We do not suggest studying these lists directly, instead, begin writing code naturally, and allow your IDE’s built-in style checker to report issues as you find them. The most important rules to get started are: . | Indent using spaces, not tabs; use 2 spaces for each level of indentation | Enclose all string literals with single quotes, not double | Variables must be named using lowerCamelCase, types are named using UpperCamelCase. Constants (read-only variables that are assigned a static value once and not reused) must be named using UPPER_CASE_WITH_UNDERSCORES. | The maximum line length is 100 characters | . Naming . While the linter can automatically flag names that violate camelCase rules, it can not automatically determine that a name is “good” - this is a subjective judgement call. Please consider the following when choosing names: . | Names should be informative (e.g lineTooLong() rather than checkLineLength()) | Names for types are typically nouns or noun phrases. Interface names, however, might be adjectives (e.g. Serializable). Class names may be noun phrases that include the interface name (e.g. CuckooClock and DigitalClock for classes that implement the interface Clock). | Use noun-like names for functions or methods that return values (e.g. circleDiameter rather than calculateDiameter). (Exception: simple getters can still have names that begin with get). | Reserve verb-like names for functions that perform actions (e.g. addItem). | Use adjective phrases for predicates when possible (e.g. line.tooLong()) | Variable and property names should be descriptive of what the variable is for, and not be named after the type of the variable (which is captured in the variable’s type declaration) | Names for properties that are private must start with a _ | . Documentation and Comments . All public properties and methods (other than getters, setters, and constructors) must be documented using JSDoc-style comments that describes what the property/method does. Example: . /** The unique identifier for this player * */ private readonly _id: string; . /** * A handler to process a remote player's subscription to updates for a room * * @param socket the Socket object that we will use to communicate with the player */ . Consider adding comments within your code to describe non-obvious behavior, or to capture why the code is written the way that it is. Do not add comments that simply restate what can already be immediately discerned by reading the code. For example, here is a useful comment: . // No valid session exists for this token, hence this client's connection should be terminated socket.disconnect(true); return; . Here is a useless comment on the same code snippet: . // Disconnect the socket socket.disconnect(true); return; . Comments are for documentation, not for keeping track of old code you are no longer using (do not submit commented-out code). ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/policies/style/",
    "relUrl": "/policies/style/"
  },"44": {
    "doc": "Textbooks",
    "title": "Textbooks",
    "content": "This class is a survey of many sub-areas of software engineering, and an unfortunate result of this is that there is no single textbook that is appropriate for this class. However, there are several texts that have chapters that are quite relevant, and most of these books are available for free for Northeastern students through O’Reilly’s Safari Books online. To create your account, first visit this page: https://www.safaribooksonline.com/library/view/temporary-access/ and then select “Not Listed? Click Here” for institution, then enter your @northeastern.edu email address. After this first account creation, you’ll be able to log in directly to Safari Books Online with your @northeastern.edu email and no need for 2FA (hooray!). The schedule will list which chapters of which texts are relevant for each lecture: . | “Software Engineering at Google” By Titus Winters, Tom Manshreck and Hyrum Wright This book is effectively a manual that describes the software engineering practices at Google, and the rationale behind those practices | “Effective Software Testing: A Developer’s Guide” by Mauricio Aniche (Not on Safari) A focused discussion of software testing concepts, with concrete examples using popular Java testing frameworks. | “The Programmer’s Brain” by Felienne Hermans (Not on Safari) A survey of research on programming and cognition, covering topics such as how to read code more effectively and how to write code that is easier to read and share. | “Fundamentals of Software Architecture” By Mark Richards and Neal Ford An overview of software architectural patterns and their role in successful software projects. | “Refactoring: Improving the Design of Existing Code” By Martin Fowler The definitive list of “code smells” that should be avoiding in programming, matched up with “refactoring” techniques to improve that code | “Learn React with TypeScript 3” by Carl RipponA solid reference for React, describing how to get started, plus more advanced features like React’s Router and testing using Jest | “Programming TypeScript” by Boris ChernyA useful introduction to TypeScript, written assuming familiarity with programming in languages like Java, C# or python. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/textbooks/",
    "relUrl": "/textbooks/"
  },"45": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/",
    "relUrl": "/tutorials/"
  },"46": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS",
    "content": "Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. For this class, you will need Node.js version 16 (16.13.2 is the latest version at time of writing, although any 16.x shoudl work in theory). There are many ways that you can install Node.js: for instance, you can use a package manager like snap or homebrew to install it; you can download an installer directly from the Node.js website, and you can, of course, build it from source. However, due to the complexity of running different Node.js versions on the same machine, we very strongly suggest using nvm, as explained below. We recommend installing Node.js using nvm, the node version manager. When language runtimes are in active development (like Node.js is), sometimes you end up needing to have multiple versions of Node.js installed, and different projects that you work on might require different versions of Node.js. These annoyances are quite rare, but when it happens that you need to have mutliple versions of Node.js installed, it’s super handy to have your system set up already so that installing multiple versions and switching between it is easy. You can use our instructions to set up nvm even if you have previously installed Node.js. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installing-nodejs",
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs"
  },"47": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS with NVM for Windows",
    "content": ". | Download nvm-setup.zip from the most recent release of nvm-windows (at time of writing this document, version 1.1.9). | . | Extract the contents of nvm-setup.zip and run the executable nvm-setup.exe. | This should open the nvm installation wizard. | . | Accept the license agreement and click next. Continue to accept the default choices for any remaining prompts, and click “install”. If you receive messages along the lines of “NodeJS version XYZ is already installed, would you like nvm to control this installation,” select “Yes”. | Upon completion, you will see the below window . | . | Open a command prompt with administrative privileges (type cmd in the windows start bar, then select “Run as administrator”). | Verify the installation, run the command nvm version . | This should display the version of nvm installed. | | . | Run the command nvm list available to display all available NodeJS versions. | . | Install the latest LTS (Long term supported, as opposed to the “development”) version of Node.js available using the command nvm install 16.13.2. | To use this version of NodeJS, run the command nvm use 16.13.2. | Now, NodeJS should be installed and ready for use. To verify the installation run the below commands: . | node -v | npm -v | | . | . Troubleshooting with VSCode: Did you follow these instructions successfully, but find a “Command not found” error when you try to run npm in VSCode? Try this: Close VSCode completely. Re-open it. In your command shell in VSCode, try again. We have noticed that if you have VSCode open while installing nvm, it is possible that VSCode will not see the new software installation until it’s closed and re-opened. You can also confirm that VSCode correctly sees the NodeJS installation by running echo %PATH% in your windows command shell in VSCode: it should include an entry similar to C:\\Program Files\\nodejs. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows",
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows"
  },"48": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Linux / Mac)",
    "content": ". | Run either curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash or wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash. | Close and reopen a terminal. | Verify nvm is working by entering command -v nvm. If your terminal prints out nvm, it should be working. If you see nvm: command not found or no feedback, open a new terminal and trying again or restart from step 1. | Install the latest LTS (Long term supported, as opposed to the “development”) version of Node.js by typing nvm install 16. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installation-steps-linux--mac",
    "relUrl": "/tutorials/week1-getting-started#installation-steps-linux--mac"
  },"49": {
    "doc": "Installing a Development Environment",
    "title": "Verification",
    "content": ". | Open a shell or windows powershell. | Run the command node -v . | This should print the current version of nodeJS installed (v16.x.x) | . | Run the command npm -v . | This should print the current version of npm installed (v8.x.x) | . | If you find that some other version is being used, and would like to change the default to 16, run the command nvm alias default 16 | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#verification",
    "relUrl": "/tutorials/week1-getting-started#verification"
  },"50": {
    "doc": "Installing a Development Environment",
    "title": "Installing Visual Studio Code (VSCode)",
    "content": "Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). VSCode also supports importing hotkey configurations from most other text editors and IDEs. Read more here. While you are required to use an IDE for this class, it is not mandatory to use VSCode: if you already are comfortable developing TypeScript or JavaScript in another suitable IDE (like IntelliJ), then you are welcome to continue to use that. However, VSCode is the “supported” option: if you struggle to get things like the linter set up correctly in VSCode, we will be happy to help you. However, we can’t provide such support for all IDEs. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installing-visual-studio-code-vscode",
    "relUrl": "/tutorials/week1-getting-started#installing-visual-studio-code-vscode"
  },"51": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | Administrative access on the host machine for software installation. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#pre-requisites",
    "relUrl": "/tutorials/week1-getting-started#pre-requisites"
  },"52": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Windows / Mac)",
    "content": ". | Download the VSCode installer from the VSCode website. | . | Run the installer to start the installation wizard for VSCode . | . | Accept the license agreement and click next. | . | Choose the installation directory of your choice and click next. | . | Click next on the select start menu folder screen. | . | Tick all check boxes on the select additional tasks menu and click next. | . | Review the settings on the the “Ready to install” screen and click Install to begin installation. | Once the installation is complete, you will see the below screen and you are ready to use VSCode. | . | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installation-steps-windows--mac",
    "relUrl": "/tutorials/week1-getting-started#installation-steps-windows--mac"
  },"53": {
    "doc": "Installing a Development Environment",
    "title": "Installation (Linux)",
    "content": ". | The above instructions for Windows/Mac should also work, but VSCode is also provided as a snap package | . | Install snap if you haven’t already by running sudo apt update and then sudo apt install snapd. | Install VSCode by running sudo snap install --classic code. | Open VSCode as an application on your desktop. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installation-linux",
    "relUrl": "/tutorials/week1-getting-started#installation-linux"
  },"54": {
    "doc": "Installing a Development Environment",
    "title": "Additional Extensions (Optional)",
    "content": "VSCode comes with a rich set of extensions to aid in software development. Below is a list of extensions that you may find useful. | GitLens - Git Supercharged | Prettier - code formatter | vscode-icons | ESLint | Andromeda (Color theme: Andromeda Colorizer) | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#additional-extensions-optional",
    "relUrl": "/tutorials/week1-getting-started#additional-extensions-optional"
  },"55": {
    "doc": "Installing a Development Environment",
    "title": "Installing Extensions (eg. ESLint)",
    "content": ". | Click on the extensions tab on the left in VSCode. | Search ESLint. | Click on Install. | Done! . | . | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installing-extensions-eg-eslint",
    "relUrl": "/tutorials/week1-getting-started#installing-extensions-eg-eslint"
  },"56": {
    "doc": "Installing a Development Environment",
    "title": "Getting Started With Typescript",
    "content": "Typescript is a superscript of JavaScript which adds type information and other features. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#getting-started-with-typescript",
    "relUrl": "/tutorials/week1-getting-started#getting-started-with-typescript"
  },"57": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | NodeJS | VSCode (recommended but not required) | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#pre-requisites-1",
    "relUrl": "/tutorials/week1-getting-started#pre-requisites-1"
  },"58": {
    "doc": "Installing a Development Environment",
    "title": "Installation",
    "content": ". | Open VSCode and press the ctrl + ~ (Tilde or back tick key) to open a terminal. | Optionally you can open a separate shell (Do not use powershell) | . | Run the command npm install -g typescript in the terminal. | Typescript should now be installed globally and accessible from the terminal. | . | Verify the installation using the command tsc -v in the terminal. (Do NOT use powershell) . | . | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#installation",
    "relUrl": "/tutorials/week1-getting-started#installation"
  },"59": {
    "doc": "Installing a Development Environment",
    "title": "Hello World",
    "content": ". | Create a new directory and open it with VSCode. | Create a new file called hello-world.ts | Add the following code to the file: console.log('Hello, World!'); . | Open the terminal with ctrl + ~. | Ensure that you are in the same directory as hello-world.ts. | . | Run the command tsc hello-world.ts . | This will generate a JS file called hello-world.js | . | Run the file with node using the command node hello-world.js. | This will give the result below. | | . | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started#hello-world",
    "relUrl": "/tutorials/week1-getting-started#hello-world"
  },"60": {
    "doc": "Installing a Development Environment",
    "title": "Installing a Development Environment",
    "content": "This tutorial describes the basic steps needed to set up a development environment with NodeJS, TypeScript, and VisualStudio Code. At the end of this tutorial, you should have a complete local development environment that you can use to build and test code for this class. Contents: . | Installing NodeJS | Installing Visual Studio Code | Hello, World in TypeScript | . If you run into any difficulties following any of these steps, please post (in a non-private question) on Piazza. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week1-getting-started",
    "relUrl": "/tutorials/week1-getting-started"
  },"61": {
    "doc": "Week 1 - Overview and Design Principles",
    "title": "Week 1 - Overview and Design Principles",
    "content": "Learning Objectives: . In this first week of the course, you will learn . | a little about the scope of Software Engineering and how it differs from programming | how this course will be organized, and what will be expected from you each week. | some general principles of good program design that are important in almost any programming context | some additional principles that are specific to object-oriented programming. | . Important Dates: . | HW1 Due Jan 28 by 10pm | . Lessons: . | Introduction to this class Slides PDF, PPT | General Program Design Principles Slides PDF, PPT | Object-Oriented Principles Slides PDF, PPT | . Tutorial . | Getting Started with TypeScript | . Resources . Additional Readings: . | Class Syllabus | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/modules/week1-overview-design-principles",
    "relUrl": "/modules/week1-overview-design-principles"
  },"62": {
    "doc": "Typescript Basics",
    "title": "Typescript Basics",
    "content": "This tutorial describes the basic concepts and syntax of typescript with code examples. Typescript is treated here as an extension of JavaScript, but it requires no prior knowledge to follow along. You can run the examples on Online Typescript Editor . Contents: . | Types in Typescript . | Boolean | Number | BigInt | String | Arrays | Tuples | Enums | Any | Unknown | . | Variable declaration in typescript | Objects | Control Flow Statements . | Equality vs Strict Equality | . | Loops | Array Functions . | ForEach | Map | Filter | Reduce | . | Functions . | Typing the function | Invoking the function | Optional and Default Parameters | Rest Parameters | Functions as Constructors | Arrow Functions | Function Overloads | . | Classes . | Creating a class | Creating an abstract class | . | Type Aliases | Interfaces | Custom types | Generics | Modules | Object oriented programming concepts using typescript . | Inheritance | Polymorphism | Abstraction | Encapsulation | . | General Guidelines | . Typescript is a superset of JavaScript. Thus, all JavaScript code is valid Typescript code. Typescript introduces concepts of optional typing, modules, and few additional features to Javascript. Let us begin by extending JavaScript to use the features of Typescript and primitive types. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics",
    "relUrl": "/tutorials/week2-typescript-basics"
  },"63": {
    "doc": "Typescript Basics",
    "title": "Types in typescript",
    "content": "Boolean . The boolean type has two values: true and false. Example: . let a = true // boolean var b = false // boolean const c = true // true let d: boolean = true // boolean let e: true = true // true . | Usage: You can compare them (with ==, ===, ||, &amp;&amp;, and ?), negate them (with !). | . Number . Number is the set of all numbers: integers, floats, positives, negatives, Infinity, NaN. Example: . var b = Infinity * 0.10 // number const c = 5678 // 5678 let d = a &lt; b // boolean let e: number = 100 // number let f: 26.218 = 26.218 . | Usage: Numbers can do things, like addition (+), subtraction (-), modulo (%), and comparison (&lt;). When working with long numbers, use numeric separators to make those numbers easier to read. | . BigInt . The bigint type is the set of all BigInts, and supports things like addition (+), subtraction (-), multiplication (*), division (/), and comparison (&lt;). Example: . let a = 1234n // bigint const b = 5678n // 5678n var c = a + b // bigint let d = a &lt; 1235 // boolean let e = 88.5n // Error TS1353: A bigint literal must be an integer. let f: bigint = 100n // bigint let g: 100n = 100n . | Usage: It lets you work with large integers without running into rounding errors. While the number type can only represent whole numbers it can hold numbers larger than 253 – 1. | . String . String is the set of all strings and the things you can do with them like concatenate (+), slice (.slice),etc. Example: . let a: any = 666 // any let b: any = ['danger'] // any let c = a + b // any . | Usage: Any functionality that requires the functionality of a string of characters. Here are a couple of string operations: | . charAt() : This method returns the character from the specified index. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string, called stringName, is stringName.length – 1. Syntax: . string.charAt(index) . slice() : This method extracts a section of a string and returns a new string. Syntax: . string.slice( beginslice [, endSlice]) . split() : This method splits a String object into an array of strings by separating the string into substrings. Syntax: . string.split([separator][, limit]) . concat(): This method adds two or more strings and returns a new single string. Syntax: . string.concat(string2, string3[, ..., stringN]) . indexOf(): This method returns the index within the calling String object of the first occurrence of the specified value, starting the search at index or -1 if the value is not found. Syntax: . string.indexOf(searchValue[, fromIndex]) . Arrays . Like in JavaScript, TypeScript arrays are special kinds of objects that support things like concatenation, pushing, searching, and slicing. Arrays are iterable Objects with the keys as numbers. Example: . let a = [1, 2, 3] // number[] var b = ['a', 'b'] // string[] let c: string[] = ['a'] // string[] let d = [1, 'a'] // (string | number)[] const e = [2, 'b'] // (string | number)[] let f = ['red'] f.push('blue') let g = [] // any[] g.push(1) // number[] g.push('red') // (string | number)[] let h: number[] = [] // number[] h.push(1) // number[] . Tuples . Tuples are subtypes of array. They’re a special way to type arrays that have fixed lengths, where the values at each index have specific, known types. Unlike most other types, tuples have to be explicitly typed when you declare them. Example: . let a: [number] = [1] // A tuple of [first name, last name, birth year] let b: [string, string, number] = ['malcolm', 'gladwell', 1963] . | Usage: In TypeScript Tuples support optional elements too. Just like in object types, ? means “optional”. Tuples also support rest elements, which you can use to type tuples with minimum lengths. Not only do tuple types safely encode heterogeneous lists, but they also capture the length of the list they type. | . Enums . Enums are a way to enumerate the possible values for a type. They are unordered data structures that map keys to values. Example: . enum Language { English, Spanish, Russian } . | Usage: There are two kinds of enums: enums that map from strings to strings, and enums that map from strings to numbers. Use it when you wish to provide flexibility making it easier to express and document intentions and use cases or when you want to save compile-time and runtime with inline code. | . Any . The any data type is the super type of all types in TypeScript. It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable. Example: . let a: any = 666 // any let b: any = ['danger'] // any let c = a + b // any . | Usage: In TypeScript everything needs to have a type at compile time, and any is the default type when you (the programmer) and TypeScript (the typechecker) can’t figure out what type something is. It’s a last resort type, and you should avoid it when possible. | . Unknown . If any is the Godfather, then unknown is Keanu Reeves as undercover FBI agent Johnny Utah in Point Break: laid back, fits right in with the bad guys, but deep down has a respect for the law and is on the side of the good guys. You can compare unknown values (with ==, ===, &amp;&amp;, and ?), and refine them (like you can any other type) with JavaScript’s typeof and instanceof operators. Example: . let a: unknown = 30 // unknown let b = a === 123 // boolean . | Usage: For the few cases where you have a value whose type you really don’t know ahead of time, don’t use any, and instead reach for unknown. Like any, it represents any value, but TypeScript won’t let you use an unknown type until you refine it by checking what it is. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#types-in-typescript",
    "relUrl": "/tutorials/week2-typescript-basics#types-in-typescript"
  },"64": {
    "doc": "Typescript Basics",
    "title": "Variable declaration in typescript",
    "content": "Variables can be declared in Typescript using one of 3 keywords: . | var: var declarations are accessible anywhere within their containing function, module, namespace, or global scope - all which we’ll go over later on - regardless of the containing block. Some people call this var-scoping or function-scoping. Parameters are also function scoped. | let: When a variable is declared using let, it uses what some call lexical-scoping or block-scoping. Unlike variables declared with var whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block. | const: They are like let declarations but, as their name implies, their value cannot be changed once they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them. | . The syntax of declarations is as below: . var &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; let &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; const &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; . Example: . let num: number = 1; const PI: number = 3.14; let x: string = \"This is a string\"; const t: boolean = true; const f: boolean = false; let uninitialized: any; . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#variable-declaration-in-typescript",
    "relUrl": "/tutorials/week2-typescript-basics#variable-declaration-in-typescript"
  },"65": {
    "doc": "Typescript Basics",
    "title": "Objects",
    "content": ". | Objects are similar to dictionaries with key-value pairs. | Arrays are iterable Objects with the keys as numbers. | . Examples: . const myObj: any = { key1: 'value1', key2: 'value2' }; console.log(myObj.key1); // prints 'value1' . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#objects",
    "relUrl": "/tutorials/week2-typescript-basics#objects"
  },"66": {
    "doc": "Typescript Basics",
    "title": "Control Flow Statements",
    "content": "Typescript contains the following control flow statements: . | If-Else | Switch | Ternary operator: Shorthand for if-else which returns a value. | . If condition syntax: . if(condition) { // executed when condition is true } if(condition) { // executed when condition is true } else { // executed when condition is false } if(condition) { // executed when condition is true } else if(condition2) { // checked only if condition is false // executed when condition2 is true } else { // executed when all conditions in the if-elseif ladder are false. } . Switch case syntax: . switch (variable) { case &lt;case1&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing case &lt;case2&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing default: // executed if variable does not match any prior cases } . Ternary Syntax: . let x = (condition) ? /* Executed when condition is true */ : /*Executed when condition is false*/; . Examples: . const str: string = \"ABCD\"; if(str === \"ABCD\") { console.log(\"it was true\"); } else { console.log(\"it was false\"); } switch (str) { case \"ABCD\": console.log('It was ABCD'); break; case \"WXYZ\": console.log('It was WXYZ'); break; default: console.log('It was something completely different') } let y: string = (str.includes(\"A\")) ? \"The string contains A\" : \"The string does not contain A\"; // y now contains \"The string contains A\" . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#control-flow-statements",
    "relUrl": "/tutorials/week2-typescript-basics#control-flow-statements"
  },"67": {
    "doc": "Typescript Basics",
    "title": "Equality vs Strict Equality",
    "content": "Typescript/JavaScript contain 2 equality operators: . | ==: Compares only the value of entities being compared. | ===: Compares the type and value of entities being compared. | . Example: . if(0 == '0') { } // Evaluates to true despite comparing string to number. if(0 === '0') { } // Evaluated to false because types are different. We recommend using strict equality (===) in all cases, and this recommendation is enforced by our linter. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#equality-vs-strict-equality",
    "relUrl": "/tutorials/week2-typescript-basics#equality-vs-strict-equality"
  },"68": {
    "doc": "Typescript Basics",
    "title": "Loops",
    "content": "Typescript contains the following loops: . | For | While | Do-while | . Examples: . for(let i: number = 0; i &lt; 10; i++) { } while(condition) { } do { } while(condition) . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#loops",
    "relUrl": "/tutorials/week2-typescript-basics#loops"
  },"69": {
    "doc": "Typescript Basics",
    "title": "Array Functions",
    "content": "ForEach, Map, reduce, and filter are all array methods in JavaScript. Each one will iterate over an array and perform a transformation or computation. Each will return a new array based on the result of the function. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#array-functions",
    "relUrl": "/tutorials/week2-typescript-basics#array-functions"
  },"70": {
    "doc": "Typescript Basics",
    "title": "ForEach",
    "content": "forEach() method calls a function for each element in the array. It returns the resultant array. Syntax . array.forEach(callback[, thisObject]); . Example . let num = [7, 8, 9]; num.forEach(function (value) { console.log(value); }); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#foreach",
    "relUrl": "/tutorials/week2-typescript-basics#foreach"
  },"71": {
    "doc": "Typescript Basics",
    "title": "Map",
    "content": "It is an array function that transforms the array according to the applied function and returns the updated array. It works on each element of an array. Syntax . array.map(callback[,object]) . callback - It is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type - List . Examples . //Calculate cube of each element with the help of map. function cube(n){ return n*n*n; } var arr=new Array(1,2,3,4) var newArr=arr.map(cube); console.log(newArr) // Output : [1,8,27,64] . In the above example, a function called “cube” is created and then is passed as a callback function into map(). ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#map",
    "relUrl": "/tutorials/week2-typescript-basics#map"
  },"72": {
    "doc": "Typescript Basics",
    "title": "Reduce",
    "content": "It also works on a callback for each element of an array. It reduces the result of this callback function from one array element to the other. Syntax . array.reduce(callback[,initalValue]) . callback - this parameter is the function to execute on each value in the array. intitalValue - this parameter is the object to use as the first argument of the first call of the callback. Examples . //To calculate product of every element of an array, var arr = new Array (1,2,3,4,5) var val = arr.reduce(function(a,b){ return a*b; }); //output =&gt; 120 . Calculate the total salary from a list of object, then you will use the reduce() like, . var employees = [ { id: 20, name: 'Ajay', salary:30000 }, { id: 24, name: 'Vijay', salary:35000 }, { id: 56, name: 'Rahul', salary:32000 }, { id: 88, name: 'Raman', salary:38000 } ]; var totalSalary= employees .reduce(function (total, record) { return total + record.salary; }, 0); //It will return the total salary of all the employees. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#reduce",
    "relUrl": "/tutorials/week2-typescript-basics#reduce"
  },"73": {
    "doc": "Typescript Basics",
    "title": "Filter",
    "content": "As the name suggests it can filter out the data/array elements on the basis of condition and return the result as a list. Basically, this function pushes the current element into a new array when the callback functions return true. Syntax . array.map(callback[,object]) . callback - it is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type: List . Examples . //Calculate a list of even elements from an array : arr = new Array(1, 2, 3, 6, 5, 4) var newArr = arr.filter(function(record) { return record % 2 == 0; }); // output =&gt; [2,6,4] . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#filter",
    "relUrl": "/tutorials/week2-typescript-basics#filter"
  },"74": {
    "doc": "Typescript Basics",
    "title": "Functions",
    "content": ". | Functions usually “take in” data, process it, and “return” a result. Remember one function/method one job! . | There is a lot you can do with functions in JavaScript like assign them to variables, pass them to other functions, return them from functions, assign them to objects and prototypes, write properties to them, read those properties back, and so on, and TypeScript models all of those things with its rich type system, which we just learnt. | Typescript enables us to set the types for our function parameters and our return type. | Functions in Typescript are defined as below: . function functionName(argument1: &lt;type&gt;, defaultArgument: &lt;type&gt; = value, optionalArgument?: &lt;type&gt;): &lt;return type&gt; { // Function body } . | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#functions",
    "relUrl": "/tutorials/week2-typescript-basics#functions"
  },"75": {
    "doc": "Typescript Basics",
    "title": "Typing the function",
    "content": "A simple function in javascript would look like this: . // Named function function add(a, b) { return a + b; } . Now, let’s add types to our simple examples above: . function add(a: number, b: number): number { return a + b; } . You will usually explicitly annotate function parameters (a and b in this example)—TypeScript will always infer types throughout the body of your function, but in most cases it won’t infer types for your parameters. The return type is inferred, but it’s a good practice to explicitly annotate it. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#typing-the-function",
    "relUrl": "/tutorials/week2-typescript-basics#typing-the-function"
  },"76": {
    "doc": "Typescript Basics",
    "title": "Invoking the function",
    "content": "When you invoke a function in TypeScript, you don’t need to provide any additional type information—just pass in some arguments, and TypeScript will go to work checking that your arguments are compatible with the types of your function’s parameters: . add(1, 2); // evaluates to 3 . Of course, if you forgot an argument, or passed an argument of the wrong type, TypeScript will be quick to point it out: . add(1); // Error TS2554: Expected 2 arguments, but got 1. add(1, 'a'); // Error TS2345: Argument of type '\"a\"' is not assignable // to parameter of type 'number'. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#invoking-the-function",
    "relUrl": "/tutorials/week2-typescript-basics#invoking-the-function"
  },"77": {
    "doc": "Typescript Basics",
    "title": "Optional and Default Parameters",
    "content": "Like in object and tuple types, you can use ? to mark parameters as optional. When declaring your function’s parameters, required parameters have to come first, followed by optional parameters: . function log(message: string, userId?: string) { let time = new Date().toLocaleTimeString() console.log(time, message, userId || 'Not signed in') } log('Page loaded') // Logs \"12:38:31 PM Page loaded Not signed in\" log('User signed in', 'da763be') // Logs \"12:38:31 PM User signed in da763be\" . You can provide default values for optional parameters. Semantically it’s similar to making a parameter optional, in that callers no longer have to pass it in (a difference is that default parameters don’t have to be at the end of your list of parameters, while optional parameters do). For example, we can rewrite log as: . function log(message: string, userId = 'Not signed in') { let time = new Date().toISOString() console.log(time, message, userId) } log('User clicked on a button', 'da763be') log('User signed out') . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#optional-and-default-parameters",
    "relUrl": "/tutorials/week2-typescript-basics#optional-and-default-parameters"
  },"78": {
    "doc": "Typescript Basics",
    "title": "Rest Parameters",
    "content": "If a function takes a list of arguments, you can of course simply pass the list in as an array: . function sum(numbers: number[]): number { return numbers.reduce((total, n) =&gt; total + n, 0); } sum([1, 2, 3]); // evaluates to 6 . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#rest-parameters",
    "relUrl": "/tutorials/week2-typescript-basics#rest-parameters"
  },"79": {
    "doc": "Typescript Basics",
    "title": "Functions as Constructors",
    "content": "In Typescript/Javascript, Functions can be used as constructors for creating objects. This is similar to classes, but not quite the same. Examples: . function Person(firstName: string, lastName: string): void { this.firstName = firstName; this.lastName = lastName; this.getFullName = function(): string { return this.firstName + ' ' + this.lastName; } } const person1 = new Person('first', 'last'); console.log(person1.getFullName()); // Returns 'first last'. | Constructors can’t have type parameters - these belong on the outer class declaration . | Constructors can’t have return type annotations - the class instance type is always what’s returned ```ts class Point { x: number; y: number; . | . // Normal signature with defaults constructor(x = 0, y = 0) { this.x = x; this.y = y; } } . ## Arrow Functions Arrow Functions (also called fat arrow functions) are functions which have lexical 'this' and 'arguments'. This are especially useful in class methods to preserve the context when using higher order functions. Examples: ```ts let sum = (x: number, y: number): number =&gt; { return x + y; } sum(10, 20); //returns 30 . In the above example, sum is an arrow function. (x:number, y:number) denotes the parameter types, :number specifies the return type. The fat arrow =&gt; separates the function parameters and the function body. The right side of =&gt; can contain one or more code statements. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#functions-as-constructors",
    "relUrl": "/tutorials/week2-typescript-basics#functions-as-constructors"
  },"80": {
    "doc": "Typescript Basics",
    "title": "Function Overloads",
    "content": "In TypeScript, we can specify a function that can be called in different ways by writing overload signatures. To do this, write some number of function signatures (usually two or more), followed by the body of the function: . //function makeDate() with one parameter function makeDate(timestamp: number): Date; //function makeDate() with three parameters function makeDate(m: number, d: number, y: number): Date; //function makeDate() with one parameter and 2 default parameters function makeDate(mOrTimestamp: number, d?: number, y?: number): Date { if (d !== undefined &amp;&amp; y !== undefined) { return new Date(y, mOrTimestamp, d); } else { return new Date(mOrTimestamp); } } const d1 = makeDate(12345678); const d2 = makeDate(5, 5, 5); const d3 = makeDate(1, 3); //No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#function-overloads",
    "relUrl": "/tutorials/week2-typescript-basics#function-overloads"
  },"81": {
    "doc": "Typescript Basics",
    "title": "Classes",
    "content": "Classes are blueprints for creating objects. | They can contain properties, methods, and a constructor. | All members of a class can have an access modifier: public, protected, private. | Members can also be static (shared across all instances of the class) and final (immutable). | Class properties may have getters and setters. | Classes can extend other classes. | Classes can implement interfaces. | . Creating a Class . A class definition can include the following: . | Fields − A field is any variable declared in a class. Fields represent data pertaining to objects | Constructors − Responsible for allocating memory for the objects of the class | Functions − Functions represent actions an object can take. They are also at times referred to as methods | . Examples: . class Person { private firstName: string = ''; protected middleName: string; public lastName: string = ''; private static final NeverGonnaGiveYouUp: any; protected static final NeverGonnaLetYouDown: any; public static final isRickRolled: boolean = true; constructor() { // I execute when you call new Person(). // No access modifier === public by default. // Make me private if implementing a singleton. } public anyoneCanCallMe(): void { this.childClassesCanCallMe(); } protected childClassesCanCallMe(): void { this.onlyPersonCanCallMe(); } private onlyAccessibleInsidePerson(): void { // I lied, anyone can call me if you know how. // Welcome to JavaScript :p } public get firstName(): string { return this.firstName; } public set firstName(firstName: string): void { this.firstName = firstName; } } const person = Person(); person.firstName = 'first'; console.log(person.firstName); person.anyoneCanCallMe(); class SpecialPerson extends Person { // I contain everything person has, and can extend/override it. constructor() { super() // I call the constructor for Person. } } . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#classes",
    "relUrl": "/tutorials/week2-typescript-basics#classes"
  },"82": {
    "doc": "Typescript Basics",
    "title": "Creating an abstract class",
    "content": ". | Define an abstract class in Typescript using the abstract keyword. Abstract classes are mainly for inheritance where other classes may derive from them. We cannot create an instance of an abstract class. | An abstract class typically includes one or more abstract methods or property declarations. The class which extends the abstract class must define all the abstract methods. | . Example: . abstract class Person { abstract name: string; display(): void{ console.log(this.name); } } class Employee extends Person { name: string; empCode: number; constructor(name: string, code: number) { super(); // must call super() this.empCode = code; this.name = name; } } let emp: Person = new Employee(\"James\", 100); emp.display(); //James . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#creating-an-abstract-class",
    "relUrl": "/tutorials/week2-typescript-basics#creating-an-abstract-class"
  },"83": {
    "doc": "Typescript Basics",
    "title": "Type Aliases",
    "content": "We’ve been using object types and union types by writing them directly in type annotations. This is convenient, but it’s common to want to use the same type more than once and refer to it by a single name. A type alias is exactly that - a name for any type. The syntax for a type alias is: . type Point = { x: number; y: number; }; function printCoord(pt: Point) { console.log(\"The coordinate's x value is \" + pt.x); console.log(\"The coordinate's y value is \" + pt.y); } printCoord({ x: 100, y: 100 }); . You can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type: . type ID = number | string; . Note that aliases are only aliases - you cannot use type aliases to create different/distinct “versions” of the same type. When you use the alias, it’s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type: . type UserInputSanitizedString = string; function sanitizeInput(str: string): UserInputSanitizedString { return sanitize(str); } // Create a sanitized input let userInput = sanitizeInput(getInput()); // Can still be re-assigned with a string though userInput = \"new input\"; . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#type-aliases",
    "relUrl": "/tutorials/week2-typescript-basics#type-aliases"
  },"84": {
    "doc": "Typescript Basics",
    "title": "Interfaces",
    "content": "Interfaces are used to define contracts for interaction with external entities. If an interface has a property/method, an Object/Class which implements it must have it. Interfaces can be used to define custom types for Objects in Typescript. Examples: . //Interface IPerson respresents a person by attributes firstName and lastName and a method to getFullName() interface IPerson { firstName: string; lastName: string; getFullName(): string; } //Class Person implements interface Iperson. Person class must contains ll the attributes and methods of interface. class Person implements IPerson { public firstName: string = ''; public lastName: string = ''; public getFullName(): string { return this.firstName + ' ' + this.lastName; } // It can contain any other properties/methods but must contain those in the interface. } const person: IPerson = new Person(); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#interfaces",
    "relUrl": "/tutorials/week2-typescript-basics#interfaces"
  },"85": {
    "doc": "Typescript Basics",
    "title": "Custom types",
    "content": ". | For complicated types (usually required for Objects), it is recommended to use an interface. | Additionally, typescript contain the ‘type’ keyword which can be used to create new types. | This is generally used when a union of different types is required. | . Examples: . interface IStudent { name: string; age: number; studentID: number; gender: string; isEnrolled: boolean; } const student: IStudent = { name: 'name', age: 20, studentID: 111111111, gender: 'hidden' isEnrolled: true; }; type StringOrNumber = string | number; let x = 1; x = 'some string'; . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#custom-types",
    "relUrl": "/tutorials/week2-typescript-basics#custom-types"
  },"86": {
    "doc": "Typescript Basics",
    "title": "Generics",
    "content": ". | Generics allow us to pass different types to a function/class making it more generalized. | This will be especially useful when working with http requests. | . Examples: . function myFunc&lt;T&gt;(data: T): T { console.log(data); return data } let x: string = myFunc&lt;string&gt;('some string'); let y: number = myFunc&lt;number&gt;(5); class myClass&lt;T&gt; { } interface IMyInterface&lt;T&gt; { } . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#generics",
    "relUrl": "/tutorials/week2-typescript-basics#generics"
  },"87": {
    "doc": "Typescript Basics",
    "title": "Modules",
    "content": "A Module in typescript is defined by using the ‘Import’ or ‘Export’ keywords within a file. Variables declared in a module are scoped locally and are not added to the global scope. | Export makes the variables and functions from a file visible outside it. | Import allows use to use variables and functions exported by another file. | . Examples: . // file1.ts export const someVar: string = 'Variables can be exported too.'; export default function add(x: number, y: number): number { return x + y; } export function subtract(x: number, y: number): number { return x - y; } function multiply(): void { throw new Error(); } // file2.ts import add from './file1'; // curly braces are not required if export default is used. // There can be only 1 export default in a while. Use it if file has only 1 export. import { subtract } from './file1'; add(1, 2); subtract(2, 1); // multiply cannot be imported. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#modules",
    "relUrl": "/tutorials/week2-typescript-basics#modules"
  },"88": {
    "doc": "Typescript Basics",
    "title": "Object oriented programming concepts using typescript",
    "content": "Object Oriented Programming or OOP is a programming paradigm that has four principles which are: . | Inheritance | Polymorphism | Abstraction | Encapsulation | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#object-oriented-programming-concepts-using-typescript",
    "relUrl": "/tutorials/week2-typescript-basics#object-oriented-programming-concepts-using-typescript"
  },"89": {
    "doc": "Typescript Basics",
    "title": "Inheritance",
    "content": "TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes. A class inherits from another class using the ‘extends’ keyword. Child classes inherit all properties and methods except private members and constructors from the parent class. However, TypeScript doesn’t support multiple inheritance. Syntax: . class child_class_name extends parent_class_name . Example: . //Parent class Shape class Shape { Area:number constructor(a:number) { this.Area = a } } //Child class Circle that inherits properties of Shape class Circle extends Shape { disp():void { console.log(\"Area of the circle: \"+this.Area) } } var obj = new Circle(223); obj.disp() . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#inheritance",
    "relUrl": "/tutorials/week2-typescript-basics#inheritance"
  },"90": {
    "doc": "Typescript Basics",
    "title": "Polymorphism",
    "content": "When multiple classes inherit from a parent and override the same functionality, the result is polymorphism. Each of those child classes now implements a property or method, but they each may have their own way of performing that implementation. lternatively, one child class might override the parent’s members while another child doesn’t but just accepts the parent class’s implementation instead. This also demonstrates polymorphic behavior, since those behaviors are different between the siblings. class CheckingAccount { open(initialAmount: number) { // code to open account and save in database } } class BusinessCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt; 1000) { throw new Error(\"Business accounts must have an initial deposit of 1.000 Euros\") } super.open(initialAmount); } } class PersonalCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt;= 0) { throw new Error(\"Personal accounts must have an initial deposit of more than zero Euros\") } super.open(initialAmount); } } . In the above code sample shows, the two child classes have different business rules to implement when it comes to opening an account – mainly different opening balances. Because both children have a method to open the account but both children choose to do it differently means the behavior is polymorphic. To achieve polymorphism, inherit from a base class, then override methods and write implementation code in them. In addition to overriding methods, you can overload methods to achieve polymorphism. Overloaded methods are methods that have different signatures (i.e., different data types or number of arguments) with the same name. However, in TypeScript, methods aren’t overloaded by simply modifying the types or number of arguments like in some other languages. To create an overload in TypeScript, you can either add optional arguments to a method, or overload function declarations in an interface and implement the interface. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#polymorphism",
    "relUrl": "/tutorials/week2-typescript-basics#polymorphism"
  },"91": {
    "doc": "Typescript Basics",
    "title": "Abstraction",
    "content": "Abstraction is a way to model objects in a system that creates a separation of duties between class or type and the code that inherits it. A developer creates a type, i.e., a class or interface, and that type specifies what the calling code should implement, but not how. So it’s the job of the abstract type to define what needs to be done, but up to the consuming types to actually do those things. To enforce abstraction, inherit or implement from abstract classes and interfaces. For example, some bank accounts have fees. You can create a Fee interface that defines a method for charging a fee. Fees don’t apply to all types of accounts, so it’s best to create an interface that can be applied to specific classes anywhere in the inheritance hierarchy. A checking account might charge fees, where its parent and sibling, the generic bank account and savings accounts might not. interface Fee { chargeFee(amount: number ); } // parent BankAccount and sibling SavingsAccount do not implement Fee interface class BankAccount { ... } class SavingsAccount extends BankAccount { ... } // checking implements Fee class CheckingAccount extends BankAccount implements Fee { chargeFee(amount: number) {} } . Children classes inherit interface members that have been implemented in their parent, so if a BusinessChecking account has inherited from the CheckingAccount class, then it inherits that implementation. // BusinessChecking inherits CheckingAccount and therefore Fee class BusinessChecking extends CheckingAccount { … } // Code that uses BusinessChecking can call chargeFee function CalculateMonthlyStatements() { let businessChecking = new BusinessChecking(); businessChecking.chargeFee(100); } . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#abstraction",
    "relUrl": "/tutorials/week2-typescript-basics#abstraction"
  },"92": {
    "doc": "Typescript Basics",
    "title": "Encapsulation",
    "content": "Encapsulation is a key part of Object Oriented Programming that is a way to structure code so that a certain block of code has specific access points for external code. The term for this is “visibility” or “accessibility”. Visibility defines what code from one method, property, or class can call code in another method, property, or class. In TypeScript, we enforce encapsulation with methods and properties that only allow access to data that we control. The Withdraw method below does that by doing the calculation and updating the class level _balance field. The Balance property then returns the private _balance field to the calling code. Withdraw(amount: number): boolean { if (this._balance &gt; amount) { this._balance -= amount return true; } return false; } private _balance: number; get Balance(): number { return this._balance; } . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#encapsulation",
    "relUrl": "/tutorials/week2-typescript-basics#encapsulation"
  },"93": {
    "doc": "Typescript Basics",
    "title": "General Guidelines",
    "content": ". | Naming conventions . | use kebab-case for file names. | Use camelCase for variable and function names. | Use PascalCase for Class and constructor function names. | . | Prefer descriptive names over random letters. | Although typing is optional in typescript, it is not optional for this course. | Always use strict equality. | Use a linter. (as specified on course website) | Use a prettifier. (If the linter doesn’t do it already) | Use general coding guidelines as discussed in Week1. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week2-typescript-basics#general-guidelines",
    "relUrl": "/tutorials/week2-typescript-basics#general-guidelines"
  },"94": {
    "doc": "Week 2 - Knowledge Sharing & Documenting Designs",
    "title": "Week 2 - Knowledge Sharing & Documenting Designs",
    "content": "Learning Objectives: . When you design a program or system, you will always need to express that design in ways that can be shared with others. The goal of this week’s lessons is to provide you with some basic vocabulary for talking about your design. We will talk about designs at three scales: . | The Architectural Scale, which describes the overall structure of your program . | The Interaction Scale, which describes the ways in which the objects in your program interact with each other. | The Object Scale, which describes the structure, properties, and methods of individual objects. | . Important Dates: . | HW1 Due Jan 28 by 10pm | . Lessons: . | Three Scales of Design Slides PDF, PPT | The Architectural Scale Slides PDF, PPT | The Interaction Scale Slides PDF, PPT | The Object Scale Slides PDF, PPT | . Resources . | Code Examples for Lessons 2.1-2.4 | . Additional Readings: . | Design Patterns | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/modules/week2-knowledge-sharing-design-doc",
    "relUrl": "/modules/week2-knowledge-sharing-design-doc"
  },"95": {
    "doc": "Week 3 - Requirements, Process and Teams",
    "title": "Week 3 - Requirements, Process and Teams",
    "content": "Learning Objectives: . The overall theme of this week’s lessons is software engineering processes: how do we organize our (non-programming) activities so that we can build some software project as efficiently as possible? The lessons will center on these four themes: . | How do we understand what software we are supposed to build? | How do we organize our development activities? | How do we estimate how long a software project will take? | How do we build an effective team? | . Important Dates: . | Team Formation Due Feb 9 by 10pm | HW2 Due Feb 11 by 10pm | Project Specification | . Lessons: . | Requirements Gathering Slides PDF, PPT | Software Process Slides PDF, PPT | Agile Planning and Estimation Slides PDF, PPT | Teams Slides PDF, PPT | . Additional Readings: . The following books provide additional depth on the topics in this week’s lessons, and are available for free through Northeastern Libraries. To create your account, first visit this page: https://www.safaribooksonline.com/library/view/temporary-access/ and then select “Not Listed? Click Here” for institution, then enter your @northeastern.edu email address. After this first account creation, you’ll be able to log in directly to Safari Books Online with your @northeastern.edu email and no need for 2FA (hooray!). | The Mythical Man-Month | Head First Agile | eXtreme Programming eXplained | Debugging Teams | . For more reflections on software processes in the 1980’s, David Parnas’ article: “Software Aspects of Strategic Defense Systems”. For a discussion of various xDD approaches, see Rebecca Wirfs-Brock on What Drives Design?. Chuck Rossi’s 2014 Release Engineering Keynote includes some great discussion of Facebook’s mobile release process, now outdated, but quite interesting; there is a discussion of team structure around 18 minutes in. Sarah Mei’s 2018 Power of Agile talk provides a great discussion of embracing agile values that work for your team, while leaving behind toxic practices. Miscellaneous: Investigating the origins of the tire swing meme . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/modules/week3-processs",
    "relUrl": "/modules/week3-processs"
  },"96": {
    "doc": "Week 4 - Async Programming and Debugging",
    "title": "Week 4 - Async Programming and Debugging",
    "content": "Learning Objectives: . This week’s lessons will bring us deeper into TypeScript, discussing the asynchronous programming model. As a common use-case for asynchronous programming, we’ll also talk about the REST architecture. In preparation for next week’s focus on testing, we’ll also talk about structured techniques for debugging. Important Dates: . | Team Formation Due Feb 9 by 10pm | HW2 Due Feb 11 by 10pm | Project Specification | . Lessons: . | Concurrent Programming Models Slides PDF, PPT | Asynchronous Programming Slides PDF, PPT | REST Protocols Slides PDF, PPT | Debugging Strategies Slides PDF, PPT | . Additional Readings: . For more debugging tips and strategies, see Effective Debugging: 66 Specific Ways to Debug Software and Systems by Diomidis Spinellis. See also the async tutorial and solutions. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/modules/week4-async",
    "relUrl": "/modules/week4-async"
  },"97": {
    "doc": "Unit Testing with Jest",
    "title": "Understanding Unit Testing",
    "content": "At some point, every programmer has wondered why they should spend time writing test cases instead of focusing on implementing a new feature. The reason for this is that it is important! In this tutorial, we’ll go through several aspects of unit testing, with a focus on utilizing Jest. Before we get into that, let’s define unit testing and why it’s so important in the real world. Unit testing is not a new concept; it has been around for a long time. “Unit tests are often automated tests prepared and executed by software engineers to check that a portion of an application (referred to as a “unit”) matches its design and behaves as expected,” according to Wikipedia. So, to put it another way, it’s a technique to undertake rigorous testing of every single function/module in isolation. Unit testing technques: . | Black Box Testing : It is a process of validating a function’s input and output without any knowledge of it’s internal implementation details. | White Box Testing : Unlike Black Box testing, white box testing focuses on testing the specific internal code flows, uncovering any unidentified error or bug in that component. | Gray Box Testing : Gray Box testing is a combination of the two above wherein partial knowledge of the internal code is needed. This strategy lowers a tester’s reliance on a developer for every minor issue, allowing the tester to detect and resolved it alone. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#understanding-unit-testing",
    "relUrl": "/tutorials/week5-unit-testing#understanding-unit-testing"
  },"98": {
    "doc": "Unit Testing with Jest",
    "title": "Testing with Jest",
    "content": " ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#testing-with-jest",
    "relUrl": "/tutorials/week5-unit-testing#testing-with-jest"
  },"99": {
    "doc": "Unit Testing with Jest",
    "title": "Basics",
    "content": "To understand the basics of unit testing, let us look at the file called ‘calculator.ts’ present in the directory src/services/math/. This file contains a class called Calculator with a method for add() defined as shown below: . // Contents of src/services/math/calculator.ts export default class Calculator { public add(num1: number, num2: number): number { const result: number = num1 + num2; console.log(\"The result is: \", result); return result; } } . Let us write some tests for this code using jest. The test code will go into a file in the same directory titled ‘calculator.spec.ts’. Create this file now. This pattern of ‘file-name.spec.ts’ is how you should name all of your test files when using jest. All test files start with a suite. A suite is a collection of tests (or a logical grouping of tests). In jest, a suite is created by using the function describe(). The suite takes 2 arguments: the 1st being the description of the suite and the second being a callback function. Additionally, suites can be nested to form logical groups. Suites can further be broken down into 3 components that we will explore in detail shortly: . | Setup | Teardown | Test | . Syntax: . describe(\"Description of suite\", () =&gt; { // The tests go here. }); . Suites can be used to make debugging easier when you are using a large number of tests. Here is one recommended suite hierarchy: . | Top level describe should contain the file path after src. | Second describe should contain the name of the Class/File being tested. | Subsequent describe blocks should contain the name of the function being tested. | . Using this hierarchy, the test file for the above example would look as follows: . describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { // Tests for add() go here. }); }); }); . Specs . A spec is an actual test that executes some code and asserts some result. A test is created using the keyword it() or test(). Similar to describe(), it() takes 2 arguments, the first being the description of the test and the second being a callback. Generally, we want to describe what the code should do in the description of it() and assert the described behavior within the test. Each test can be broken down into 3 parts (Assemble, Act, Assert) which makes up the AAA pattern. Optionally, there may be a clean-up/teardown step after the assert. Syntax: . it(\"should check a specific behaviour\", () =&gt; {}); . Let us write a simple test for our add() method to check 1 + 1 = 2. We start by adding a spec to the suite we created previously. describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { // Assemble // Act // Assert }); }); }); }); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#basics",
    "relUrl": "/tutorials/week5-unit-testing#basics"
  },"100": {
    "doc": "Unit Testing with Jest",
    "title": "Matchers",
    "content": ".toEqual() vs .toBe() vs .toStrictEqual() . All three matchers are used to test equality, though they have slight but important differences. To understand these differences, let us take a look at the example of Store.ts with the below code. export default class Store { private static _data: any = null; public static getData(): any { return Store._data; } public static setData(data: any): void { Store._data = data; } } . | Use .toEqual() to compare recursively all properties of object instances (also known as “deep” equality). It calls Object.is to compare primitive values, which is even better for testing than ‘===’, the strict equality operator. This is the most commonly used matcher. | . describe(\"utils &gt; store\", () =&gt; { describe(\"Store\", () =&gt; { beforeEach(() =&gt; { Store[\"_data\"] = undefined; }); describe(\"setData()\", () =&gt; { it(\"should assign the input data to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store.setData(mockData); expect(Store[\"_data\"]).toEqual(mockData); }); }); describe(\"getData()\", () =&gt; { it(\"should return an object equal to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); }); }); }); }); . | Use .toBe() to compare primitive values or to check referential identity of object instances. It calls Object.is to compare values, which is even better for testing than ‘===’, the strict equality operator. | . describe(\"getData()\", () =&gt; { it(\"should return an object with a reference different to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); expect(returnedValue).not.toBe(mockData); expect(Store[\"_data\"]).toBe(mockData); }); }); . | Use .toStrictEqual() to test that objects have the same types as well as structure. This checks for undefined in Objects and sparseness in Arrays. | { key: undefined } is not strictly equal to { }. | [ , 1] is not strictly equal to [undefined, 1]. | . | . it(\"should return an object strictly equal to object stored in Store._data\", () =&gt; { const mockData = { key: \"value\" }; const mockDataWithUndefined = { key: \"value\", key2: undefined }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toStrictEqual(mockData); expect(returnedValue).toEqual(mockDataWithUndefined); expect(returnedValue).not.toStrictEqual(mockDataWithUndefined); }); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#matchers",
    "relUrl": "/tutorials/week5-unit-testing#matchers"
  },"101": {
    "doc": "Unit Testing with Jest",
    "title": "AAA",
    "content": "Assemble . In order to run a test, we need to first assemble it. This may include creating instances of classes/variables, setting up test data for inputs, setting up spies/stubs/mocks (which will be covered in subsequest sections), or setting up the expected output. In simple cases, one may not need to assemble the test. This phase is very similar to the setup phase. In our example, let us create an instance of the Calculator class as part of assembling the test. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); // Act // Assert }); }); }); }); . Act . In this step, we actually execute the function under test with required inputs and get the returned result (if any). In our example, we will invoke the add() method with inputs (1, 1) and get the result. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); // Assert }); }); }); }); . Assert . Assertion is a statement that validates the behavior of our code by comparing the actual result against the expected results. There are many assertions provided by Jest, including some useful assertions we will use throughout our tests. Some of these assertions are listed below: . | expect(actual).toEqual(expected) // Expects both entities to have the same value. | expect(actual).toBe(expected) // Expects both entities to be the same. | expect(spy/stub/mock).toHaveBeenCalled() // Expects a function being spied/stubbed/mocked to be invoked. | expect(spy/stub/mock).toHaveBeenCalledWith([arguments]) // Expects a function being spied/stubbed/mocked to be invoked with specified arguments. | expect(actual).toBeDefined() // Expects the entity to be defined. | expect(actual).not. // Negates the assertion. Can be chained with any matchers above | await expect(error causing code returning a promise).rejects.toThrowError() // Waits for the error throwing code that returns promise (e.g. an API call) to throw the error and asserts the error was thrown. | . A full list of matchers can be found here. In our example, we can use the .toEqual() matcher. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#aaa",
    "relUrl": "/tutorials/week5-unit-testing#aaa"
  },"102": {
    "doc": "Unit Testing with Jest",
    "title": "Setup and Teardown",
    "content": "Often in tests, we need some things to happen before a test actually runs and some things to happen after it. This may include resetting/initializing values, setting up test data, setting up spies/stubs/mocks, cleaning up variables after a test, or resetting spies/stubs/mocks. Sometimes these steps may need to be repeated for each test. This is where the setup and teardown can be especially useful. Jest Provides 2 methods for setup and 2 methods for teardown: . | beforeAll(): Runs one time before all the tests in a suite. | beforeEach(): Runs before every test in a suite. | afterEach(): Runs after every test in a suite. | afterAll(): Runs once after all tests in a suite. | . In our example, notice we created an instance of calculator in our Assemble phase. We will probably have multiple tests for the calculator that will require this instance. In order to avoid repeating this in every step, let us move this to the setup phase and add a teardown to clear this after all tests. Note: Use beforeEach()/afterEach() if the function/class stores state, and we need a clean instance for each test. In our case, calculator does not store any state, and we can share the same instance across tests with out any side effects. Hence, we will use beforeAll()/afterAll(). import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . Let us add another test to cover a different scenario, such as adding negative numbers. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); it(\"should return -2 when inputs are -1 and -1\", () =&gt; { const result: number = calculator.add(-1, -1); expect(result).toEqual(-2); }); }); }); }); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#setup-and-teardown",
    "relUrl": "/tutorials/week5-unit-testing#setup-and-teardown"
  },"103": {
    "doc": "Unit Testing with Jest",
    "title": "Mock Testing",
    "content": "As a project grows so do the interdependencies in the project. A function under test can have dependencies from various external entities. This may include other functions, network requests, database connections, or built-in connections. Spies, Stubs, and Mocks are ways of dealing with such external dependencies. You can read more on what you can do with spies/stubs/mocks here. Spy . A spy is a watcher on a function that tracks various properties of the function being spied on. This can return information such as whether a function was invoked, how many times it was invoked, and what argument it was invoked with. A spy on a function is created using the syntax const spy = jest.spyOn(object, 'methodName'); . Note: The function being spied on actually executes. In our example, we have an external dependency on console.log(). Let us add a spy and test for it. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); }); }); }); . Mock . A mock is function which replaces an existing function. In our example, if we wanted to change the behavior of console.log() for our tests, we can do so using a mock. A mock implementation can be substituted for a spy or a jest.fn(). The syntax is as below: . spy.mockImplementation(() =&gt; { // new function body goes here. }); . Note: The function being mocked does not execute. In our example, if we wanted to replace the behavior of console.log(), we can do so as shown: . it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); logSpy.mockImplementation(() =&gt; { // This will no longer print to console. }); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . Warning: Watch out for circular dependencies in mock implementations. Stub . A stub is a special kind of mock which does not require an alternate implementation but instead returns some value that we specify. When a stub gets invoked, it does not invoke the actual function, but returns the desired value instead. The syntax is as below: . spy.mockReturnValue(someValue); . To return a promise, we can use: . spy.mockResolvedValue(someValue); . This can be especially handy when stubbing Axios requests. Using a stub in our example simply prevents console.log() from being executed, since it does not return a value anyway. it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); logSpy.mockReturnValue(); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#mock-testing",
    "relUrl": "/tutorials/week5-unit-testing#mock-testing"
  },"104": {
    "doc": "Unit Testing with Jest",
    "title": "Testing Asynchronous Code",
    "content": "Promise . In previous tutorials, we have used Axios to make http requests which return promises. This is how we can write tests for axios requests. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } } . We can test the above code as follows: . // Assuming we have done the setup as in previous tests describe(\"getData()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getData(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should return the status as 200\", async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); const response = await httpService.getData(); expect(response.status).toEqual(200); getStub.mockRestore(); }); }); . Note: You can return different values for subsequent calls to a stub. Occasionally, you may run into situations where an http request is made but no promise is returned. This is often found in cases involving “fire and forget” calls or a central store with an Observable pattern implementation (e.g. Redux with react). We cannot await a function that does not return a promise. However, we can use fake timers to simulate passage of time to test such asynchronous behavior. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } public getDataAndSetStore(): void { axios.get(\"/myUrl\").then((res) =&gt; { Store.setData(res.data); }); } } . We can test the above functionality as follows: . describe(\"getDataAndSetStore()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getDataAndSetStore(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should set the data in store\", async () =&gt; { const addDataStub = jest.spyOn(Store, \"setData\").mockImplementation(); const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: \"myData\" }); jest.useFakeTimers(); httpService.getDataAndSetStore(); jest.runAllTimers(); await Promise.resolve(); expect(addDataStub).toHaveBeenCalledWith(\"myData\"); addDataStub.mockRestore(); getStub.mockRestore(); jest.useRealTimers(); }); }); . Callbacks . Callbacks are one of the most commonly used patterns for asynchronous programming in JavaScript/TypeScript. Consider the below callback function use case: . test('Check if I am a true husky', () =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); } fetchData(callback); }); . Here, fetchData() is a function that takes a callback and would call that callback function later in it’s implementation. Now consider 2 scenarios: . case 1: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am from Northeastern!'); }, 1000); } . case 2: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am not from Northeastern!'); }, 1000); } . The test case would still pass in either of the above scenarios since fetchData() is an async function, which means the program will not wait for the call to complete. The correct way to test a callback would be using the argument done in the test like shown in below example: . test('Check if I am a true husky', (done) =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); done(); } fetchData(callback); }); . Now, the program would wait for done to be invoked. This implementation would correctly test both the above scenarios. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#testing-asynchronous-code",
    "relUrl": "/tutorials/week5-unit-testing#testing-asynchronous-code"
  },"105": {
    "doc": "Unit Testing with Jest",
    "title": "Setting up testing using Jest in VSCode",
    "content": "Testing can sometimes get cumbersome as the user is expected to remember all the options provided by Jest to run a specific set of tests, or otherwise the user will have to run the entire test suite just to verify the result of a single test case. Not anymore! . With vscode-jest, you have complete control over the way you want to run tests, with many features that visually inform the users about which specific line is failing with what error. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#setting-up-testing-using-jest-in-vscode",
    "relUrl": "/tutorials/week5-unit-testing#setting-up-testing-using-jest-in-vscode"
  },"106": {
    "doc": "Unit Testing with Jest",
    "title": "Features",
    "content": ". | Starts Jest automatically when you’re in a root folder project with Jest installed. | Show individual fail / passes inline. | Show fails inside the problem inspector. | Highlights the errors next to the expect functions. | Adds syntax highlighting to snapshot files. | A one button update for failed snapshots. | Show coverage information in files being tested. | Help debug jest tests in vscode. | Supports multiple test run modes (automated, manual, and hybrid onSave) to meet user’s preferred development experience. | Track and shows overall workspace/project test stats | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#features",
    "relUrl": "/tutorials/week5-unit-testing#features"
  },"107": {
    "doc": "Unit Testing with Jest",
    "title": "Installation",
    "content": "Direct Installation . | Open Visual Studio Code, go to the extension tab. | Search for “Jest” with the publisher name as “Orta”. | Click “Install”. | . From Visual Studio Marketplace . | Visit Jest - Visual Studio Marketplace and click “Install”. | Allow the browser to open VSCode as shown (might be different for macOS/Linux systems) by clicking on Continue. | Once VSCode is open, click on “Install”. | . Once installed, the extension should work out of the box without any extra configuration for most of the homework handouts and project starter code. You can verify the installation by checking if the following is visible to you when you open a project which has Jest configured (VSCode restart maybe required.). If restarting Jest does not work, you can run the following in your VSCode by opening VSCode’s command palette (Ctrl + Shift + P in Windows, Cmd + Shift + P in macOS) and run the following - “Jest: Start All Runners”. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#installation",
    "relUrl": "/tutorials/week5-unit-testing#installation"
  },"108": {
    "doc": "Unit Testing with Jest",
    "title": "Configuration",
    "content": "As of the latest stable version, the extension is set to run all tests whenever any change is made to the files containing the tests. You can modify the behaviour to manual execution where you can run specific test cases as and when required. This can be modified by changing the \"jest.autoRun\" setting as follows - . | \"jest.autoRun\": {\"watch\": true} =&gt; will start the jest with the watch flag and leave all tests at “unknown” state until changes are detected. | \"jest.autoRun\": {\"watch\": true, \"onStartup\": [\"all-tests\"]} =&gt; will start running all tests upon project launch to update overall project test stats, followed by the jest watch for changes. | \"jest.autoRun\": \"off\" =&gt; there will be no automatic test run, users will trigger test run by either command or context-menu. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-file\"} =&gt; the extension will trigger test run for the given test file upon save. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-src-file\"} =&gt; the extension will trigger test run for the given test or source file upon save. | . An example of changing the extension to run in manual mode is demonstrated below - . NOTE - You will only be able to Run specific test cases as and when required only when autoRun is off. However, you’ll be able to Debug any test cases in all available modes. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#configuration",
    "relUrl": "/tutorials/week5-unit-testing#configuration"
  },"109": {
    "doc": "Unit Testing with Jest",
    "title": "Debugging Tests",
    "content": "Once the extension is setup and confirmed to be working, we can now begin debugging the tests. You can do so by opening the testing tab from the left sidebar in VSCode to view all the tests present in the current project. You can also navigate to the specific test file manually, and you will notice some icons/action buttons in the editor next to each test. Right clicking on the icons will bring up a test-specific context menu which will have options to debug the specific test. Be sure to place breakpoints in the specific pieces of code by clicking to the left of the line numbers. If everything is setup correctly, the debugger in VSCode will pause at the breakpoint you set and you can check the values of the variables by hovering over the said variable. ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#debugging-tests",
    "relUrl": "/tutorials/week5-unit-testing#debugging-tests"
  },"110": {
    "doc": "Unit Testing with Jest",
    "title": "General Guidelines For Writing Tests",
    "content": "Note: The following will be used as a reference when grading assignments. | Tests should be hermetic. | Reduce flakiness. | Flaky tests are those that fail intermittently: . | Nondeterminism (e.g., hash codes, random numbers); | Timing issues (e.g., threads, network). | Availability of Resources | . | . | Tests should be clear. | After failure, should be clear what went wrong. | . | Tests should be scoped as small as possible. | Faster and more reliable. | . | Tests should make calls against public APIs. | Or they become brittle | Brittle tests are those that are not self-contained: . | Ordering of tests (e.g., assume prior state) | . | . | . Note: The following will not be used as a reference when grading assignments. But you should try following these guidelines as much as you can. | Write tests based on the expected behavior, not based on the interpretation/implementation of it. | Test assertion (expect) should match the test description. | Each spec should test only 1 thing (preferably with 1 assertion per test). | Organize tests using suites (i.e. each method has it’s own suite). | Use setup and teardown functions to reduce code duplicity. | Code duplicity in tests is preferred over complicated logic to reduce it. | If your tests need tests, they have no value. | . | Cover the happy path for your code first. | Follow up with edge cases. | End with error scenarios. | . | Mock/Stub all external dependencies. | Clear the mocks after each test. | . | If large test data is being used, ensure clean-up after tests to prevent memory leaks. | Code coverage is a deceptive measure. 100% coverage does not mean 100% tested code. | A well designed test suite improves the quality and reliability of code. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing#general-guidelines-for-writing-tests",
    "relUrl": "/tutorials/week5-unit-testing#general-guidelines-for-writing-tests"
  },"111": {
    "doc": "Unit Testing with Jest",
    "title": "Unit Testing with Jest",
    "content": "This tutorial covers the basics on unit testing with Jest. By the end of this tutorial, you will have an introduction to unit testing with jest, best practices, and some handy tricks and tips to use in your tests. Starter code is available here, and finished code with tests covered in this tutorial can be found here. We strongly recommend using the completed solution only for reference and implementing the tutorial step by step from the starter code. Contents: . | Understanding Unit Testing | Testing with Jest . | Basics . | Specs | . | Matchers . | .toEqual() vs .toBe() vs .toStrictEqual() | . | AAA . | Assemble | Act | Assert | . | Setup and Teardown | Mock Testing . | Spy | Mock | Stub | . | Testing Asynchronous Code . | Promise | Callbacks | . | . | Setting up testing using Jest in VSCode . | Features | Installation . | Direct Installation | From Visual Studio Marketplace | . | Configuration | Debugging Tests | . | General Guidelines For Writing Tests | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/tutorials/week5-unit-testing",
    "relUrl": "/tutorials/week5-unit-testing"
  },"112": {
    "doc": "Week 5 - Testing Intro, Unit Tests / Test Adequacy Measures",
    "title": "Week 5 - Testing Intro, Unit Tests / Test Adequacy Measures",
    "content": "Learning Objectives: . This week’s lessons will focus on testing, discussing the need for testing and importance of testing automation. We will also highlight what makes a test good or bad, how we compute code coverage and how one might judge how well a test suite accomplishes its testing goals. Finally we will discuss how to test larger systems by using test doubles. Important Dates: . | Project Teams announced on Piazza | Project Kick-off Meeting by 2/18 | Project Pitch due 2/25 | . Lessons: . | Introduction to Testing Slides PDF, PPT | Evaluating Tests Slides PDF, PPT | Testing Systems Slides PDF, PPT | . Additional Readings: . | For more discussion on Test Double, see Martin Fowler’s article, “Mocks Aren’t Stubs”. | See also the book by Gerard Meszaros “xUnit Test Patterns: Refactoring Test Code”. | . ",
    "url": "https://neu-se.github.io/CS4530-Spring-2022/modules/week5-testing",
    "relUrl": "/modules/week5-testing"
  }
}
